// Code generated by protoc-gen-go.
// source: log_control.proto
// DO NOT EDIT!

package gazebo_msgs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LogControl struct {
	Start            *bool   `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	Stop             *bool   `protobuf:"varint,2,opt,name=stop" json:"stop,omitempty"`
	Paused           *bool   `protobuf:"varint,3,opt,name=paused" json:"paused,omitempty"`
	BasePath         *string `protobuf:"bytes,4,opt,name=base_path" json:"base_path,omitempty"`
	Encoding         *string `protobuf:"bytes,5,opt,name=encoding" json:"encoding,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogControl) Reset()                    { *m = LogControl{} }
func (m *LogControl) String() string            { return proto.CompactTextString(m) }
func (*LogControl) ProtoMessage()               {}
func (*LogControl) Descriptor() ([]byte, []int) { return fileDescriptor53, []int{0} }

func (m *LogControl) GetStart() bool {
	if m != nil && m.Start != nil {
		return *m.Start
	}
	return false
}

func (m *LogControl) GetStop() bool {
	if m != nil && m.Stop != nil {
		return *m.Stop
	}
	return false
}

func (m *LogControl) GetPaused() bool {
	if m != nil && m.Paused != nil {
		return *m.Paused
	}
	return false
}

func (m *LogControl) GetBasePath() string {
	if m != nil && m.BasePath != nil {
		return *m.BasePath
	}
	return ""
}

func (m *LogControl) GetEncoding() string {
	if m != nil && m.Encoding != nil {
		return *m.Encoding
	}
	return ""
}

func init() {
	proto.RegisterType((*LogControl)(nil), "gazebo.msgs.LogControl")
}

func init() { proto.RegisterFile("log_control.proto", fileDescriptor53) }

var fileDescriptor53 = []byte{
	// 138 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x24, 0xca, 0xbf, 0x0e, 0x82, 0x40,
	0x0c, 0x80, 0xf1, 0xa0, 0x60, 0xa0, 0xfe, 0x89, 0xdc, 0xd4, 0xd1, 0x38, 0x39, 0xf1, 0x12, 0xae,
	0x3e, 0x83, 0xa4, 0xc0, 0xa5, 0x9a, 0xe0, 0xf5, 0x72, 0xad, 0x8b, 0x4f, 0xaf, 0x1e, 0xe3, 0xf7,
	0xcb, 0x07, 0xed, 0x2c, 0xdc, 0x8f, 0x12, 0x2c, 0xc9, 0xdc, 0xc5, 0x24, 0x26, 0x6e, 0xcb, 0xf4,
	0xf1, 0x83, 0x74, 0x2f, 0x65, 0x3d, 0xdf, 0x01, 0x6e, 0xc2, 0xd7, 0x65, 0x70, 0x7b, 0xa8, 0xd4,
	0x28, 0x19, 0x16, 0xa7, 0xe2, 0x52, 0xbb, 0x1d, 0x94, 0x6a, 0x12, 0x71, 0x95, 0xeb, 0x00, 0x9b,
	0x48, 0x6f, 0xf5, 0x13, 0xae, 0x73, 0xb7, 0xd0, 0x0c, 0xa4, 0xbe, 0x8f, 0x64, 0x0f, 0x2c, 0x7f,
	0xd4, 0xb8, 0x23, 0xd4, 0x3e, 0x8c, 0x32, 0x3d, 0x03, 0x63, 0xf5, 0x97, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xf9, 0x70, 0xa5, 0x44, 0x80, 0x00, 0x00, 0x00,
}
