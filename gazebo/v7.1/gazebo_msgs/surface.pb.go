// Code generated by protoc-gen-go.
// source: surface.proto
// DO NOT EDIT!

package gazebo_msgs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Surface struct {
	Friction                     *Friction `protobuf:"bytes,1,opt,name=friction" json:"friction,omitempty"`
	RestitutionCoefficient       *float64  `protobuf:"fixed64,2,opt,name=restitution_coefficient" json:"restitution_coefficient,omitempty"`
	BounceThreshold              *float64  `protobuf:"fixed64,3,opt,name=bounce_threshold" json:"bounce_threshold,omitempty"`
	SoftCfm                      *float64  `protobuf:"fixed64,4,opt,name=soft_cfm" json:"soft_cfm,omitempty"`
	SoftErp                      *float64  `protobuf:"fixed64,5,opt,name=soft_erp" json:"soft_erp,omitempty"`
	Kp                           *float64  `protobuf:"fixed64,6,opt,name=kp" json:"kp,omitempty"`
	Kd                           *float64  `protobuf:"fixed64,7,opt,name=kd" json:"kd,omitempty"`
	MaxVel                       *float64  `protobuf:"fixed64,8,opt,name=max_vel" json:"max_vel,omitempty"`
	MinDepth                     *float64  `protobuf:"fixed64,9,opt,name=min_depth" json:"min_depth,omitempty"`
	CollideWithoutContact        *bool     `protobuf:"varint,10,opt,name=collide_without_contact" json:"collide_without_contact,omitempty"`
	CollideWithoutContactBitmask *uint32   `protobuf:"varint,11,opt,name=collide_without_contact_bitmask" json:"collide_without_contact_bitmask,omitempty"`
	CollideBitmask               *uint32   `protobuf:"varint,12,opt,name=collide_bitmask" json:"collide_bitmask,omitempty"`
	ElasticModulus               *float64  `protobuf:"fixed64,13,opt,name=elastic_modulus" json:"elastic_modulus,omitempty"`
	XXX_unrecognized             []byte    `json:"-"`
}

func (m *Surface) Reset()                    { *m = Surface{} }
func (m *Surface) String() string            { return proto.CompactTextString(m) }
func (*Surface) ProtoMessage()               {}
func (*Surface) Descriptor() ([]byte, []int) { return fileDescriptor107, []int{0} }

func (m *Surface) GetFriction() *Friction {
	if m != nil {
		return m.Friction
	}
	return nil
}

func (m *Surface) GetRestitutionCoefficient() float64 {
	if m != nil && m.RestitutionCoefficient != nil {
		return *m.RestitutionCoefficient
	}
	return 0
}

func (m *Surface) GetBounceThreshold() float64 {
	if m != nil && m.BounceThreshold != nil {
		return *m.BounceThreshold
	}
	return 0
}

func (m *Surface) GetSoftCfm() float64 {
	if m != nil && m.SoftCfm != nil {
		return *m.SoftCfm
	}
	return 0
}

func (m *Surface) GetSoftErp() float64 {
	if m != nil && m.SoftErp != nil {
		return *m.SoftErp
	}
	return 0
}

func (m *Surface) GetKp() float64 {
	if m != nil && m.Kp != nil {
		return *m.Kp
	}
	return 0
}

func (m *Surface) GetKd() float64 {
	if m != nil && m.Kd != nil {
		return *m.Kd
	}
	return 0
}

func (m *Surface) GetMaxVel() float64 {
	if m != nil && m.MaxVel != nil {
		return *m.MaxVel
	}
	return 0
}

func (m *Surface) GetMinDepth() float64 {
	if m != nil && m.MinDepth != nil {
		return *m.MinDepth
	}
	return 0
}

func (m *Surface) GetCollideWithoutContact() bool {
	if m != nil && m.CollideWithoutContact != nil {
		return *m.CollideWithoutContact
	}
	return false
}

func (m *Surface) GetCollideWithoutContactBitmask() uint32 {
	if m != nil && m.CollideWithoutContactBitmask != nil {
		return *m.CollideWithoutContactBitmask
	}
	return 0
}

func (m *Surface) GetCollideBitmask() uint32 {
	if m != nil && m.CollideBitmask != nil {
		return *m.CollideBitmask
	}
	return 0
}

func (m *Surface) GetElasticModulus() float64 {
	if m != nil && m.ElasticModulus != nil {
		return *m.ElasticModulus
	}
	return 0
}

func init() {
	proto.RegisterType((*Surface)(nil), "gazebo.msgs.Surface")
}

func init() { proto.RegisterFile("surface.proto", fileDescriptor107) }

var fileDescriptor107 = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x8f, 0x41, 0x4e, 0xeb, 0x30,
	0x10, 0x86, 0xd5, 0xbe, 0x07, 0x49, 0x27, 0x84, 0x96, 0x48, 0xa8, 0x23, 0x36, 0x45, 0x6c, 0x60,
	0x95, 0x05, 0x87, 0xe0, 0x02, 0x1c, 0xc0, 0x72, 0x1c, 0xbb, 0xb1, 0x6a, 0x67, 0xa2, 0x78, 0x0c,
	0x88, 0x1b, 0x72, 0x2b, 0xdc, 0x94, 0x20, 0x58, 0xb0, 0x1b, 0xff, 0xdf, 0x37, 0x1a, 0xff, 0x50,
	0x86, 0x38, 0x1a, 0xa9, 0x74, 0x3d, 0x8c, 0xc4, 0x54, 0x15, 0x7b, 0xf9, 0xae, 0x1b, 0xaa, 0x7d,
	0xd8, 0x87, 0x9b, 0x4b, 0x33, 0x5a, 0xc5, 0x96, 0xfa, 0x13, 0xbc, 0xfb, 0x58, 0x42, 0xf6, 0x7c,
	0xd2, 0xab, 0x7b, 0xc8, 0x67, 0x8a, 0x8b, 0xdb, 0xc5, 0x43, 0xf1, 0x78, 0x5d, 0xff, 0xd8, 0xad,
	0x9f, 0xbe, 0x60, 0xb5, 0x83, 0xed, 0xa8, 0x03, 0x5b, 0x8e, 0xc7, 0xa7, 0x50, 0xa4, 0x8d, 0xb1,
	0xca, 0xea, 0x9e, 0x71, 0x99, 0xf6, 0x16, 0x15, 0xc2, 0xa6, 0xa1, 0xd8, 0x2b, 0x2d, 0xb8, 0x4b,
	0x66, 0x47, 0xae, 0xc5, 0x7f, 0x13, 0xd9, 0x40, 0x1e, 0xc8, 0xb0, 0x50, 0xc6, 0xe3, 0xff, 0x5f,
	0x89, 0x1e, 0x07, 0x3c, 0x9b, 0x12, 0x80, 0xe5, 0x61, 0xc0, 0xf3, 0xef, 0xb9, 0xc5, 0x6c, 0x9a,
	0xd7, 0x90, 0x79, 0xf9, 0x26, 0x5e, 0xb4, 0xc3, 0x7c, 0x0a, 0xae, 0x60, 0xe5, 0x6d, 0x2f, 0x5a,
	0x3d, 0x70, 0x87, 0xab, 0x29, 0x4a, 0x5f, 0x53, 0xe4, 0x9c, 0x6d, 0xb5, 0x78, 0xb5, 0xdc, 0x51,
	0x4c, 0xa7, 0xa8, 0x67, 0xa9, 0x18, 0x21, 0x09, 0x79, 0x2a, 0xb9, 0xfb, 0x43, 0x10, 0x8d, 0x65,
	0x2f, 0xc3, 0x01, 0x8b, 0x24, 0x96, 0xd5, 0x16, 0xd6, 0xb3, 0x38, 0x83, 0x8b, 0x19, 0x68, 0x27,
	0x53, 0x7d, 0x25, 0x3c, 0xb5, 0xd1, 0xc5, 0x80, 0xe5, 0xf1, 0xf6, 0x67, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x9c, 0xac, 0x6f, 0x90, 0x78, 0x01, 0x00, 0x00,
}
