// Code generated by protoc-gen-go.
// source: imu_sensor.proto
// DO NOT EDIT!

package gazebo_msgs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type IMUSensor struct {
	// / \brief Angular velocity information
	AngularVelocity *IMUSensor_AngularVelocity `protobuf:"bytes,1,opt,name=angular_velocity" json:"angular_velocity,omitempty"`
	// / \brief Linear acceleration information
	LinearAcceleration *IMUSensor_LinearAcceleration `protobuf:"bytes,2,opt,name=linear_acceleration" json:"linear_acceleration,omitempty"`
	XXX_unrecognized   []byte                        `json:"-"`
}

func (m *IMUSensor) Reset()                    { *m = IMUSensor{} }
func (m *IMUSensor) String() string            { return proto.CompactTextString(m) }
func (*IMUSensor) ProtoMessage()               {}
func (*IMUSensor) Descriptor() ([]byte, []int) { return fileDescriptor39, []int{0} }

func (m *IMUSensor) GetAngularVelocity() *IMUSensor_AngularVelocity {
	if m != nil {
		return m.AngularVelocity
	}
	return nil
}

func (m *IMUSensor) GetLinearAcceleration() *IMUSensor_LinearAcceleration {
	if m != nil {
		return m.LinearAcceleration
	}
	return nil
}

// / \brief Angular velocity information
type IMUSensor_AngularVelocity struct {
	// / \brief Noise about the x-axis
	XNoise *SensorNoise `protobuf:"bytes,1,opt,name=x_noise" json:"x_noise,omitempty"`
	// / \brief Noise about the y-axis
	YNoise *SensorNoise `protobuf:"bytes,2,opt,name=y_noise" json:"y_noise,omitempty"`
	// / \brief Noise about the z-axis
	ZNoise           *SensorNoise `protobuf:"bytes,3,opt,name=z_noise" json:"z_noise,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *IMUSensor_AngularVelocity) Reset()                    { *m = IMUSensor_AngularVelocity{} }
func (m *IMUSensor_AngularVelocity) String() string            { return proto.CompactTextString(m) }
func (*IMUSensor_AngularVelocity) ProtoMessage()               {}
func (*IMUSensor_AngularVelocity) Descriptor() ([]byte, []int) { return fileDescriptor39, []int{0, 0} }

func (m *IMUSensor_AngularVelocity) GetXNoise() *SensorNoise {
	if m != nil {
		return m.XNoise
	}
	return nil
}

func (m *IMUSensor_AngularVelocity) GetYNoise() *SensorNoise {
	if m != nil {
		return m.YNoise
	}
	return nil
}

func (m *IMUSensor_AngularVelocity) GetZNoise() *SensorNoise {
	if m != nil {
		return m.ZNoise
	}
	return nil
}

// / \brief Linear acceleration information
type IMUSensor_LinearAcceleration struct {
	// / \brief Noise about the x-axis
	XNoise *SensorNoise `protobuf:"bytes,1,opt,name=x_noise" json:"x_noise,omitempty"`
	// / \brief Noise about the y-axis
	YNoise *SensorNoise `protobuf:"bytes,2,opt,name=y_noise" json:"y_noise,omitempty"`
	// / \brief Noise about the z-axis
	ZNoise           *SensorNoise `protobuf:"bytes,3,opt,name=z_noise" json:"z_noise,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *IMUSensor_LinearAcceleration) Reset()         { *m = IMUSensor_LinearAcceleration{} }
func (m *IMUSensor_LinearAcceleration) String() string { return proto.CompactTextString(m) }
func (*IMUSensor_LinearAcceleration) ProtoMessage()    {}
func (*IMUSensor_LinearAcceleration) Descriptor() ([]byte, []int) {
	return fileDescriptor39, []int{0, 1}
}

func (m *IMUSensor_LinearAcceleration) GetXNoise() *SensorNoise {
	if m != nil {
		return m.XNoise
	}
	return nil
}

func (m *IMUSensor_LinearAcceleration) GetYNoise() *SensorNoise {
	if m != nil {
		return m.YNoise
	}
	return nil
}

func (m *IMUSensor_LinearAcceleration) GetZNoise() *SensorNoise {
	if m != nil {
		return m.ZNoise
	}
	return nil
}

func init() {
	proto.RegisterType((*IMUSensor)(nil), "gazebo.msgs.IMUSensor")
	proto.RegisterType((*IMUSensor_AngularVelocity)(nil), "gazebo.msgs.IMUSensor.AngularVelocity")
	proto.RegisterType((*IMUSensor_LinearAcceleration)(nil), "gazebo.msgs.IMUSensor.LinearAcceleration")
}

func init() { proto.RegisterFile("imu_sensor.proto", fileDescriptor39) }

var fileDescriptor39 = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0xcc, 0x2d, 0x8d,
	0x2f, 0x4e, 0xcd, 0x2b, 0xce, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4e, 0x4f,
	0xac, 0x4a, 0x4d, 0xca, 0xd7, 0xcb, 0x2d, 0x4e, 0x2f, 0x96, 0x12, 0x82, 0x48, 0xc5, 0xe7, 0xe5,
	0x67, 0x16, 0xa7, 0x42, 0x14, 0x28, 0x1d, 0x62, 0xe6, 0xe2, 0xf4, 0xf4, 0x0d, 0x0d, 0x06, 0xcb,
	0x08, 0x39, 0x70, 0x09, 0x24, 0xe6, 0xa5, 0x97, 0xe6, 0x24, 0x16, 0xc5, 0x97, 0xa5, 0xe6, 0xe4,
	0x27, 0x67, 0x96, 0x54, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x1b, 0xa9, 0xe9, 0x21, 0x99, 0xa4,
	0x07, 0xd7, 0xa1, 0xe7, 0x08, 0x51, 0x1e, 0x06, 0x55, 0x2d, 0xe4, 0xc6, 0x25, 0x9c, 0x93, 0x99,
	0x97, 0x0a, 0x34, 0x20, 0x31, 0x39, 0x39, 0x35, 0x27, 0xb5, 0x28, 0xb1, 0x24, 0x33, 0x3f, 0x4f,
	0x82, 0x09, 0x6c, 0x88, 0x26, 0x0e, 0x43, 0x7c, 0xc0, 0x3a, 0x1c, 0x91, 0x34, 0x48, 0x4d, 0x62,
	0xe4, 0xe2, 0x47, 0x37, 0x5b, 0x93, 0x8b, 0xbd, 0x02, 0xe2, 0x78, 0xa8, 0xa3, 0x24, 0x50, 0xcc,
	0x83, 0x18, 0xe6, 0x07, 0x92, 0x07, 0x29, 0xad, 0x84, 0x2a, 0x65, 0x22, 0xac, 0xb4, 0x0a, 0xaa,
	0x94, 0x19, 0xbf, 0x52, 0xa9, 0xa9, 0x8c, 0x5c, 0x42, 0x98, 0x6e, 0x1d, 0x70, 0x77, 0x01, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x20, 0xfd, 0x1c, 0x1b, 0xf8, 0x01, 0x00, 0x00,
}
