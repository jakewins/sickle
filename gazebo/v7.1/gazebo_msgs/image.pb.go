// Code generated by protoc-gen-go.
// source: image.proto
// DO NOT EDIT!

package gazebo_msgs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Image struct {
	Width       *uint32 `protobuf:"varint,1,req,name=width" json:"width,omitempty"`
	Height      *uint32 `protobuf:"varint,2,req,name=height" json:"height,omitempty"`
	PixelFormat *uint32 `protobuf:"varint,3,req,name=pixel_format" json:"pixel_format,omitempty"`
	Step        *uint32 `protobuf:"varint,4,req,name=step" json:"step,omitempty"`
	// repeated uint32 data          = 5; // Actual data, size if (step * rows)
	Data             []byte `protobuf:"bytes,5,req,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor35, []int{0} }

func (m *Image) GetWidth() uint32 {
	if m != nil && m.Width != nil {
		return *m.Width
	}
	return 0
}

func (m *Image) GetHeight() uint32 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

func (m *Image) GetPixelFormat() uint32 {
	if m != nil && m.PixelFormat != nil {
		return *m.PixelFormat
	}
	return 0
}

func (m *Image) GetStep() uint32 {
	if m != nil && m.Step != nil {
		return *m.Step
	}
	return 0
}

func (m *Image) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Image)(nil), "gazebo.msgs.Image")
}

func init() { proto.RegisterFile("image.proto", fileDescriptor35) }

var fileDescriptor35 = []byte{
	// 124 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0xcc, 0x4d, 0x4c,
	0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4e, 0x4f, 0xac, 0x4a, 0x4d, 0xca, 0xd7,
	0xcb, 0x2d, 0x4e, 0x2f, 0x56, 0x8a, 0xe0, 0x62, 0xf5, 0x04, 0xc9, 0x09, 0xf1, 0x72, 0xb1, 0x96,
	0x67, 0xa6, 0x94, 0x64, 0x48, 0x30, 0x2a, 0x30, 0x69, 0xf0, 0x0a, 0xf1, 0x71, 0xb1, 0x65, 0xa4,
	0x66, 0xa6, 0x67, 0x94, 0x48, 0x30, 0x81, 0xf9, 0x22, 0x5c, 0x3c, 0x05, 0x99, 0x15, 0xa9, 0x39,
	0xf1, 0x69, 0xf9, 0x45, 0xb9, 0x89, 0x25, 0x12, 0xcc, 0x60, 0x51, 0x1e, 0x2e, 0x96, 0xe2, 0x92,
	0xd4, 0x02, 0x09, 0x16, 0x18, 0x2f, 0x25, 0xb1, 0x24, 0x51, 0x82, 0x15, 0xc8, 0xe3, 0x01, 0x04,
	0x00, 0x00, 0xff, 0xff, 0xcc, 0xc7, 0x38, 0xe8, 0x74, 0x00, 0x00, 0x00,
}
