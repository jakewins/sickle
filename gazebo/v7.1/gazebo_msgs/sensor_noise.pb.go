// Code generated by protoc-gen-go.
// source: sensor_noise.proto
// DO NOT EDIT!

package gazebo_msgs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// / \brief Noise types
type SensorNoise_Type int32

const (
	// / \brief No noise
	SensorNoise_NONE SensorNoise_Type = 1
	// / \brief Gaussian noise
	SensorNoise_GAUSSIAN SensorNoise_Type = 2
	// / \brief Gaussian noise plus quantization of outputs (rounding)
	SensorNoise_GAUSSIAN_QUANTIZED SensorNoise_Type = 3
)

var SensorNoise_Type_name = map[int32]string{
	1: "NONE",
	2: "GAUSSIAN",
	3: "GAUSSIAN_QUANTIZED",
}
var SensorNoise_Type_value = map[string]int32{
	"NONE":               1,
	"GAUSSIAN":           2,
	"GAUSSIAN_QUANTIZED": 3,
}

func (x SensorNoise_Type) Enum() *SensorNoise_Type {
	p := new(SensorNoise_Type)
	*p = x
	return p
}
func (x SensorNoise_Type) String() string {
	return proto.EnumName(SensorNoise_Type_name, int32(x))
}
func (x *SensorNoise_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SensorNoise_Type_value, data, "SensorNoise_Type")
	if err != nil {
		return err
	}
	*x = SensorNoise_Type(value)
	return nil
}
func (SensorNoise_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor96, []int{0, 0} }

type SensorNoise struct {
	// / \brief The type of noise
	Type *SensorNoise_Type `protobuf:"varint,1,req,name=type,enum=gazebo.msgs.SensorNoise_Type" json:"type,omitempty"`
	// / \brief Noise mean
	// / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
	Mean *float64 `protobuf:"fixed64,2,opt,name=mean" json:"mean,omitempty"`
	// / \brief Noise standard deviation
	// / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
	Stddev *float64 `protobuf:"fixed64,3,opt,name=stddev" json:"stddev,omitempty"`
	// / \brief Noise mean bias
	// / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
	BiasMean *float64 `protobuf:"fixed64,4,opt,name=bias_mean" json:"bias_mean,omitempty"`
	// / \brief Noise standard deviation bias
	// / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
	BiasStddev *float64 `protobuf:"fixed64,5,opt,name=bias_stddev" json:"bias_stddev,omitempty"`
	// / \brief Noise  precision.
	// / Used by GAUSSIAN_QUANTIZED
	Precision        *float64 `protobuf:"fixed64,6,opt,name=precision" json:"precision,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *SensorNoise) Reset()                    { *m = SensorNoise{} }
func (m *SensorNoise) String() string            { return proto.CompactTextString(m) }
func (*SensorNoise) ProtoMessage()               {}
func (*SensorNoise) Descriptor() ([]byte, []int) { return fileDescriptor96, []int{0} }

func (m *SensorNoise) GetType() SensorNoise_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SensorNoise_NONE
}

func (m *SensorNoise) GetMean() float64 {
	if m != nil && m.Mean != nil {
		return *m.Mean
	}
	return 0
}

func (m *SensorNoise) GetStddev() float64 {
	if m != nil && m.Stddev != nil {
		return *m.Stddev
	}
	return 0
}

func (m *SensorNoise) GetBiasMean() float64 {
	if m != nil && m.BiasMean != nil {
		return *m.BiasMean
	}
	return 0
}

func (m *SensorNoise) GetBiasStddev() float64 {
	if m != nil && m.BiasStddev != nil {
		return *m.BiasStddev
	}
	return 0
}

func (m *SensorNoise) GetPrecision() float64 {
	if m != nil && m.Precision != nil {
		return *m.Precision
	}
	return 0
}

func init() {
	proto.RegisterType((*SensorNoise)(nil), "gazebo.msgs.SensorNoise")
	proto.RegisterEnum("gazebo.msgs.SensorNoise_Type", SensorNoise_Type_name, SensorNoise_Type_value)
}

func init() { proto.RegisterFile("sensor_noise.proto", fileDescriptor96) }

var fileDescriptor96 = []byte{
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0xcd, 0x41, 0x4b, 0x87, 0x30,
	0x18, 0xc7, 0x71, 0xe6, 0x7f, 0x89, 0x3d, 0x86, 0xd8, 0x82, 0xd8, 0x25, 0x10, 0x4f, 0x42, 0xb0,
	0x43, 0x87, 0xee, 0x42, 0x12, 0x5e, 0x16, 0xa1, 0x5e, 0xba, 0x88, 0xe6, 0x90, 0x1d, 0xdc, 0xc4,
	0x47, 0x82, 0x7a, 0x8b, 0xbd, 0xa9, 0x74, 0x24, 0x78, 0xfc, 0x7d, 0xf9, 0xc0, 0x0f, 0x18, 0x2a,
	0x83, 0x76, 0x69, 0x8d, 0xd5, 0xa8, 0xc4, 0xbc, 0xd8, 0xd5, 0xb2, 0x70, 0xec, 0x7e, 0x54, 0x6f,
	0xc5, 0x84, 0x23, 0xa6, 0xbf, 0x04, 0xc2, 0xca, 0x19, 0xb9, 0x13, 0xf6, 0x08, 0x74, 0xfd, 0x9e,
	0x15, 0x27, 0x89, 0x97, 0x45, 0x4f, 0x0f, 0xe2, 0x64, 0xc5, 0xc9, 0x89, 0x7a, 0x43, 0xec, 0x06,
	0xe8, 0xa4, 0x3a, 0xc3, 0xbd, 0x84, 0x64, 0x84, 0x45, 0xe0, 0xe3, 0x3a, 0x0c, 0xea, 0x8b, 0x5f,
	0xdc, 0xbe, 0x85, 0xeb, 0x5e, 0x77, 0xd8, 0x3a, 0x42, 0x5d, 0xba, 0x83, 0xd0, 0xa5, 0x7f, 0x77,
	0x75, 0xb8, 0x79, 0x51, 0x9f, 0x1a, 0xb5, 0x35, 0xdc, 0xdf, 0x53, 0xfa, 0x0c, 0xd4, 0x1d, 0x04,
	0x40, 0xe5, 0x9b, 0x2c, 0x62, 0xb2, 0x5d, 0x05, 0xaf, 0x79, 0x53, 0x55, 0x65, 0x2e, 0x63, 0x8f,
	0xdd, 0x03, 0x3b, 0x56, 0xfb, 0xde, 0xe4, 0xb2, 0x2e, 0x3f, 0x8a, 0x97, 0xf8, 0xf2, 0x17, 0x00,
	0x00, 0xff, 0xff, 0x1d, 0x02, 0xe5, 0xae, 0xef, 0x00, 0x00, 0x00,
}
