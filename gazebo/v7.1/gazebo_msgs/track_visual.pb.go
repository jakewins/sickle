// Code generated by protoc-gen-go.
// source: track_visual.proto
// DO NOT EDIT!

package gazebo_msgs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TrackVisual struct {
	// / \brief Name of the visual to track
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// / \brief Id of the visual to track
	Id *uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	// / \brief True to have the tracking camera inherit the orientation of
	// / the tracked visual.
	InheritOrientation *bool `protobuf:"varint,3,opt,name=inherit_orientation" json:"inherit_orientation,omitempty"`
	// / \brief Minimum follow distance
	MinDist *float64 `protobuf:"fixed64,4,opt,name=min_dist" json:"min_dist,omitempty"`
	// / \brief Maximum follow distance
	MaxDist *float64 `protobuf:"fixed64,5,opt,name=max_dist" json:"max_dist,omitempty"`
	// / \brief If set to true, the position of the camera is fixed.
	Static *bool `protobuf:"varint,6,opt,name=static" json:"static,omitempty"`
	// / \brief If set to true, the position of the camera is relative to the
	// / model reference frame.
	UseModelFrame *bool `protobuf:"varint,7,opt,name=use_model_frame" json:"use_model_frame,omitempty"`
	// / \brief Position of the camera.
	Xyz *Vector3D `protobuf:"bytes,8,opt,name=xyz" json:"xyz,omitempty"`
	// / \brief If set to true, the camera inherits the yaw rotation of the model.
	InheritYaw       *bool  `protobuf:"varint,9,opt,name=inherit_yaw" json:"inherit_yaw,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TrackVisual) Reset()                    { *m = TrackVisual{} }
func (m *TrackVisual) String() string            { return proto.CompactTextString(m) }
func (*TrackVisual) ProtoMessage()               {}
func (*TrackVisual) Descriptor() ([]byte, []int) { return fileDescriptor112, []int{0} }

func (m *TrackVisual) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *TrackVisual) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TrackVisual) GetInheritOrientation() bool {
	if m != nil && m.InheritOrientation != nil {
		return *m.InheritOrientation
	}
	return false
}

func (m *TrackVisual) GetMinDist() float64 {
	if m != nil && m.MinDist != nil {
		return *m.MinDist
	}
	return 0
}

func (m *TrackVisual) GetMaxDist() float64 {
	if m != nil && m.MaxDist != nil {
		return *m.MaxDist
	}
	return 0
}

func (m *TrackVisual) GetStatic() bool {
	if m != nil && m.Static != nil {
		return *m.Static
	}
	return false
}

func (m *TrackVisual) GetUseModelFrame() bool {
	if m != nil && m.UseModelFrame != nil {
		return *m.UseModelFrame
	}
	return false
}

func (m *TrackVisual) GetXyz() *Vector3D {
	if m != nil {
		return m.Xyz
	}
	return nil
}

func (m *TrackVisual) GetInheritYaw() bool {
	if m != nil && m.InheritYaw != nil {
		return *m.InheritYaw
	}
	return false
}

func init() {
	proto.RegisterType((*TrackVisual)(nil), "gazebo.msgs.TrackVisual")
}

func init() { proto.RegisterFile("track_visual.proto", fileDescriptor112) }

var fileDescriptor112 = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x8e, 0xd1, 0x4e, 0xc3, 0x20,
	0x14, 0x86, 0x43, 0x37, 0x67, 0x77, 0xd0, 0x69, 0x58, 0x8c, 0x44, 0x6f, 0x96, 0x5d, 0xed, 0x8a,
	0x0b, 0x7d, 0x15, 0xb3, 0x5b, 0x82, 0x05, 0xe7, 0x89, 0x03, 0x0c, 0xd0, 0xda, 0xf6, 0x11, 0x7d,
	0x2a, 0x0b, 0xd5, 0xc4, 0xcb, 0xf3, 0xfd, 0xf9, 0x72, 0x3e, 0x60, 0x29, 0xa8, 0xe6, 0x43, 0x76,
	0x18, 0x5b, 0x75, 0x16, 0x9f, 0xc1, 0x27, 0xcf, 0xe8, 0x49, 0x8d, 0xe6, 0xd5, 0x0b, 0x1b, 0x4f,
	0xf1, 0x61, 0xd3, 0x99, 0x26, 0xf9, 0xf0, 0xac, 0xe7, 0x71, 0xff, 0x4d, 0x80, 0xbe, 0x64, 0xe7,
	0x58, 0x14, 0x76, 0x05, 0x4b, 0xa7, 0xac, 0xe1, 0x64, 0x57, 0x1d, 0xd6, 0x0c, 0xa0, 0x42, 0xcd,
	0xab, 0x1d, 0x39, 0x5c, 0xb3, 0x47, 0xd8, 0xa2, 0x7b, 0x37, 0x01, 0x93, 0xf4, 0x01, 0x8d, 0x4b,
	0x2a, 0xa1, 0x77, 0x7c, 0x31, 0x8d, 0x35, 0xbb, 0x85, 0xda, 0xa2, 0x93, 0x1a, 0x63, 0xe2, 0xcb,
	0x89, 0x90, 0x42, 0x54, 0x3f, 0x93, 0x8b, 0x42, 0x36, 0xb0, 0x8a, 0x59, 0x6a, 0xf8, 0xaa, 0x38,
	0xf7, 0x70, 0xd3, 0x46, 0x23, 0xad, 0xd7, 0xe6, 0x2c, 0xdf, 0x42, 0xfe, 0x7a, 0x59, 0x86, 0x3d,
	0x2c, 0xfa, 0x61, 0xe4, 0xf5, 0x74, 0xd0, 0xa7, 0x3b, 0xf1, 0x2f, 0x5f, 0x1c, 0x7f, 0xeb, 0xd9,
	0x16, 0xe8, 0x5f, 0xcd, 0xa0, 0xbe, 0xf8, 0x3a, 0x8b, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe2,
	0xa9, 0x0b, 0xdd, 0xfe, 0x00, 0x00, 0x00,
}
