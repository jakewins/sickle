// Code generated by protoc-gen-go.
// source: atmosphere.proto
// DO NOT EDIT!

package gazebo_msgs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// / \brief Types of atmosphere models.
type Atmosphere_Type int32

const (
	// / \brief Adiabatic atmosphere model.
	Atmosphere_ADIABATIC Atmosphere_Type = 1
)

var Atmosphere_Type_name = map[int32]string{
	1: "ADIABATIC",
}
var Atmosphere_Type_value = map[string]int32{
	"ADIABATIC": 1,
}

func (x Atmosphere_Type) Enum() *Atmosphere_Type {
	p := new(Atmosphere_Type)
	*p = x
	return p
}
func (x Atmosphere_Type) String() string {
	return proto.EnumName(Atmosphere_Type_name, int32(x))
}
func (x *Atmosphere_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Atmosphere_Type_value, data, "Atmosphere_Type")
	if err != nil {
		return err
	}
	*x = Atmosphere_Type(value)
	return nil
}
func (Atmosphere_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

type Atmosphere struct {
	// / \brief Type of the atmosphere model.
	Type *Atmosphere_Type `protobuf:"varint,1,opt,name=type,enum=gazebo.msgs.Atmosphere_Type,def=1" json:"type,omitempty"`
	// / \brief Temperature at sea level in kelvins.
	Temperature *float64 `protobuf:"fixed64,2,opt,name=temperature" json:"temperature,omitempty"`
	// / \brief Pressure at sea level in pascals.
	Pressure *float64 `protobuf:"fixed64,3,opt,name=pressure" json:"pressure,omitempty"`
	// / \brief Mass density of the air at sea level in kg/m^3.
	MassDensity *float64 `protobuf:"fixed64,4,opt,name=mass_density" json:"mass_density,omitempty"`
	// / \brief Enable atmosphere model
	EnableAtmosphere *bool  `protobuf:"varint,5,opt,name=enable_atmosphere" json:"enable_atmosphere,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Atmosphere) Reset()                    { *m = Atmosphere{} }
func (m *Atmosphere) String() string            { return proto.CompactTextString(m) }
func (*Atmosphere) ProtoMessage()               {}
func (*Atmosphere) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

const Default_Atmosphere_Type Atmosphere_Type = Atmosphere_ADIABATIC

func (m *Atmosphere) GetType() Atmosphere_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_Atmosphere_Type
}

func (m *Atmosphere) GetTemperature() float64 {
	if m != nil && m.Temperature != nil {
		return *m.Temperature
	}
	return 0
}

func (m *Atmosphere) GetPressure() float64 {
	if m != nil && m.Pressure != nil {
		return *m.Pressure
	}
	return 0
}

func (m *Atmosphere) GetMassDensity() float64 {
	if m != nil && m.MassDensity != nil {
		return *m.MassDensity
	}
	return 0
}

func (m *Atmosphere) GetEnableAtmosphere() bool {
	if m != nil && m.EnableAtmosphere != nil {
		return *m.EnableAtmosphere
	}
	return false
}

func init() {
	proto.RegisterType((*Atmosphere)(nil), "gazebo.msgs.Atmosphere")
	proto.RegisterEnum("gazebo.msgs.Atmosphere_Type", Atmosphere_Type_name, Atmosphere_Type_value)
}

func init() { proto.RegisterFile("atmosphere.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x2c, 0xc9, 0xcd,
	0x2f, 0x2e, 0xc8, 0x48, 0x2d, 0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4e, 0x4f,
	0xac, 0x4a, 0x4d, 0xca, 0xd7, 0xcb, 0x2d, 0x4e, 0x2f, 0x56, 0xda, 0xc4, 0xc8, 0xc5, 0xe5, 0x08,
	0x57, 0x21, 0x64, 0xca, 0xc5, 0x52, 0x52, 0x59, 0x90, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x67,
	0x24, 0xa3, 0x87, 0xa4, 0x54, 0x0f, 0xa1, 0x4c, 0x2f, 0x04, 0xa8, 0xc6, 0x8a, 0xd3, 0xd1, 0xc5,
	0xd3, 0xd1, 0xc9, 0x31, 0xc4, 0xd3, 0x59, 0x48, 0x98, 0x8b, 0xbb, 0x24, 0x35, 0xb7, 0x20, 0xb5,
	0x28, 0xb1, 0xa4, 0xb4, 0x28, 0x55, 0x82, 0x09, 0xa8, 0x9b, 0x51, 0x48, 0x80, 0x8b, 0xa3, 0xa0,
	0x28, 0xb5, 0xb8, 0x18, 0x24, 0xc2, 0x0c, 0x16, 0x11, 0xe1, 0xe2, 0xc9, 0x4d, 0x2c, 0x2e, 0x8e,
	0x4f, 0x49, 0xcd, 0x2b, 0xce, 0x2c, 0xa9, 0x94, 0x60, 0x01, 0x8b, 0x4a, 0x72, 0x09, 0xa6, 0xe6,
	0x25, 0x26, 0xe5, 0xa4, 0xc6, 0x23, 0x9c, 0x2a, 0xc1, 0x0a, 0x94, 0xe2, 0x50, 0x12, 0xe5, 0x62,
	0x01, 0x59, 0x25, 0xc4, 0xcb, 0x85, 0xb0, 0x4c, 0x80, 0x11, 0x10, 0x00, 0x00, 0xff, 0xff, 0xee,
	0xe4, 0xea, 0x8f, 0xd4, 0x00, 0x00, 0x00,
}
