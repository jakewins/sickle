// Code generated by protoc-gen-go.
// source: subscribe.proto
// DO NOT EDIT!

package gazebo_msgs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Subscribe struct {
	Topic            *string `protobuf:"bytes,1,req,name=topic" json:"topic,omitempty"`
	Host             *string `protobuf:"bytes,2,req,name=host" json:"host,omitempty"`
	Port             *uint32 `protobuf:"varint,3,req,name=port" json:"port,omitempty"`
	MsgType          *string `protobuf:"bytes,4,req,name=msg_type" json:"msg_type,omitempty"`
	Latching         *bool   `protobuf:"varint,5,opt,name=latching,def=0" json:"latching,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Subscribe) Reset()                    { *m = Subscribe{} }
func (m *Subscribe) String() string            { return proto.CompactTextString(m) }
func (*Subscribe) ProtoMessage()               {}
func (*Subscribe) Descriptor() ([]byte, []int) { return fileDescriptor106, []int{0} }

const Default_Subscribe_Latching bool = false

func (m *Subscribe) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *Subscribe) GetHost() string {
	if m != nil && m.Host != nil {
		return *m.Host
	}
	return ""
}

func (m *Subscribe) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *Subscribe) GetMsgType() string {
	if m != nil && m.MsgType != nil {
		return *m.MsgType
	}
	return ""
}

func (m *Subscribe) GetLatching() bool {
	if m != nil && m.Latching != nil {
		return *m.Latching
	}
	return Default_Subscribe_Latching
}

func init() {
	proto.RegisterType((*Subscribe)(nil), "gazebo.msgs.Subscribe")
}

func init() { proto.RegisterFile("subscribe.proto", fileDescriptor106) }

var fileDescriptor106 = []byte{
	// 135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x2e, 0x4d, 0x2a,
	0x4e, 0x2e, 0xca, 0x4c, 0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4e, 0x4f, 0xac,
	0x4a, 0x4d, 0xca, 0xd7, 0xcb, 0x2d, 0x4e, 0x2f, 0x56, 0x4a, 0xe4, 0xe2, 0x0c, 0x86, 0xc9, 0x0b,
	0xf1, 0x72, 0xb1, 0x96, 0xe4, 0x17, 0x64, 0x26, 0x4b, 0x30, 0x2a, 0x30, 0x69, 0x70, 0x0a, 0xf1,
	0x70, 0xb1, 0x64, 0xe4, 0x17, 0x97, 0x48, 0x30, 0xc1, 0x78, 0x05, 0xf9, 0x45, 0x25, 0x12, 0xcc,
	0x40, 0x1e, 0xaf, 0x90, 0x00, 0x17, 0x07, 0x50, 0x7f, 0x7c, 0x49, 0x65, 0x41, 0xaa, 0x04, 0x0b,
	0x58, 0x5e, 0x9c, 0x8b, 0x23, 0x27, 0xb1, 0x24, 0x39, 0x23, 0x33, 0x2f, 0x5d, 0x82, 0x55, 0x81,
	0x51, 0x83, 0xc3, 0x8a, 0x35, 0x2d, 0x31, 0xa7, 0x38, 0x15, 0x10, 0x00, 0x00, 0xff, 0xff, 0xe9,
	0x19, 0x02, 0x8c, 0x81, 0x00, 0x00, 0x00,
}
