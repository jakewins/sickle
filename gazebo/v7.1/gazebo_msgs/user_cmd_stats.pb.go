// Code generated by protoc-gen-go.
// source: user_cmd_stats.proto
// DO NOT EDIT!

package gazebo_msgs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type UserCmdStats struct {
	// / \brief Number of user commands in the undo list.
	UndoCmdCount *uint32 `protobuf:"varint,1,req,name=undo_cmd_count" json:"undo_cmd_count,omitempty"`
	// / \brief Number of user commands in the redo list.
	RedoCmdCount *uint32 `protobuf:"varint,2,req,name=redo_cmd_count" json:"redo_cmd_count,omitempty"`
	// / \brief User commands in the undo list.
	UndoCmd []*UserCmd `protobuf:"bytes,3,rep,name=undo_cmd" json:"undo_cmd,omitempty"`
	// / \brief User commands in the redo list.
	RedoCmd          []*UserCmd `protobuf:"bytes,4,rep,name=redo_cmd" json:"redo_cmd,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *UserCmdStats) Reset()                    { *m = UserCmdStats{} }
func (m *UserCmdStats) String() string            { return proto.CompactTextString(m) }
func (*UserCmdStats) ProtoMessage()               {}
func (*UserCmdStats) Descriptor() ([]byte, []int) { return fileDescriptor115, []int{0} }

func (m *UserCmdStats) GetUndoCmdCount() uint32 {
	if m != nil && m.UndoCmdCount != nil {
		return *m.UndoCmdCount
	}
	return 0
}

func (m *UserCmdStats) GetRedoCmdCount() uint32 {
	if m != nil && m.RedoCmdCount != nil {
		return *m.RedoCmdCount
	}
	return 0
}

func (m *UserCmdStats) GetUndoCmd() []*UserCmd {
	if m != nil {
		return m.UndoCmd
	}
	return nil
}

func (m *UserCmdStats) GetRedoCmd() []*UserCmd {
	if m != nil {
		return m.RedoCmd
	}
	return nil
}

func init() {
	proto.RegisterType((*UserCmdStats)(nil), "gazebo.msgs.UserCmdStats")
}

func init() { proto.RegisterFile("user_cmd_stats.proto", fileDescriptor115) }

var fileDescriptor115 = []byte{
	// 136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x2d, 0x4e, 0x2d,
	0x8a, 0x4f, 0xce, 0x4d, 0x89, 0x2f, 0x2e, 0x49, 0x2c, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x4e, 0x4f, 0xac, 0x4a, 0x4d, 0xca, 0xd7, 0xcb, 0x2d, 0x4e, 0x2f, 0x96, 0xe2, 0x83,
	0x29, 0x81, 0x48, 0x2a, 0xf5, 0x31, 0x72, 0xf1, 0x84, 0x02, 0x85, 0x9c, 0x73, 0x53, 0x82, 0x41,
	0x7a, 0x84, 0xc4, 0xb8, 0xf8, 0x4a, 0xf3, 0x52, 0xf2, 0xc1, 0xa6, 0x24, 0xe7, 0x97, 0xe6, 0x95,
	0x48, 0x30, 0x2a, 0x30, 0x69, 0xf0, 0x82, 0xc4, 0x8b, 0x52, 0x51, 0xc4, 0x99, 0xc0, 0xe2, 0x6a,
	0x5c, 0x1c, 0x30, 0xf5, 0x12, 0xcc, 0x0a, 0xcc, 0x1a, 0xdc, 0x46, 0x22, 0x7a, 0x48, 0x16, 0xea,
	0x41, 0x0d, 0x07, 0xa9, 0x83, 0xe9, 0x97, 0x60, 0xc1, 0xad, 0x0e, 0x10, 0x00, 0x00, 0xff, 0xff,
	0xfc, 0xbb, 0xbb, 0xa1, 0xc4, 0x00, 0x00, 0x00,
}
