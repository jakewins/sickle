// Code generated by protoc-gen-go.
// source: pose_animation.proto
// DO NOT EDIT!

package gazebo_msgs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PoseAnimation struct {
	ModelName        *string `protobuf:"bytes,1,req,name=model_name" json:"model_name,omitempty"`
	ModelId          *uint32 `protobuf:"varint,2,opt,name=model_id" json:"model_id,omitempty"`
	Pose             []*Pose `protobuf:"bytes,3,rep,name=pose" json:"pose,omitempty"`
	Time             []*Time `protobuf:"bytes,4,rep,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PoseAnimation) Reset()                    { *m = PoseAnimation{} }
func (m *PoseAnimation) String() string            { return proto.CompactTextString(m) }
func (*PoseAnimation) ProtoMessage()               {}
func (*PoseAnimation) Descriptor() ([]byte, []int) { return fileDescriptor74, []int{0} }

func (m *PoseAnimation) GetModelName() string {
	if m != nil && m.ModelName != nil {
		return *m.ModelName
	}
	return ""
}

func (m *PoseAnimation) GetModelId() uint32 {
	if m != nil && m.ModelId != nil {
		return *m.ModelId
	}
	return 0
}

func (m *PoseAnimation) GetPose() []*Pose {
	if m != nil {
		return m.Pose
	}
	return nil
}

func (m *PoseAnimation) GetTime() []*Time {
	if m != nil {
		return m.Time
	}
	return nil
}

func init() {
	proto.RegisterType((*PoseAnimation)(nil), "gazebo.msgs.PoseAnimation")
}

func init() { proto.RegisterFile("pose_animation.proto", fileDescriptor74) }

var fileDescriptor74 = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x29, 0xc8, 0x2f, 0x4e,
	0x8d, 0x4f, 0xcc, 0xcb, 0xcc, 0x4d, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x4e, 0x4f, 0xac, 0x4a, 0x4d, 0xca, 0xd7, 0xcb, 0x2d, 0x4e, 0x2f, 0x96, 0xe2, 0x02,
	0x29, 0x81, 0x48, 0x48, 0x71, 0x95, 0x64, 0xe6, 0x42, 0xd9, 0x4a, 0xe5, 0x5c, 0xbc, 0x01, 0x40,
	0x19, 0x47, 0x98, 0x5e, 0x21, 0x21, 0x2e, 0xae, 0xdc, 0xfc, 0x94, 0xd4, 0x9c, 0xf8, 0xbc, 0xc4,
	0xdc, 0x54, 0x09, 0x46, 0x05, 0x26, 0x0d, 0x4e, 0x21, 0x01, 0x2e, 0x0e, 0x88, 0x58, 0x66, 0x8a,
	0x04, 0x93, 0x02, 0xa3, 0x06, 0xaf, 0x90, 0x3c, 0x17, 0x0b, 0xc8, 0x40, 0x09, 0x66, 0x05, 0x66,
	0x0d, 0x6e, 0x23, 0x41, 0x3d, 0x24, 0xab, 0xf4, 0x40, 0xe6, 0x81, 0x14, 0x80, 0x6c, 0x91, 0x60,
	0xc1, 0xa2, 0x20, 0x04, 0x28, 0x01, 0x08, 0x00, 0x00, 0xff, 0xff, 0x35, 0x6c, 0x89, 0xff, 0xb4,
	0x00, 0x00, 0x00,
}
