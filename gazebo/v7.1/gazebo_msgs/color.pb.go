// Code generated by protoc-gen-go.
// source: color.proto
// DO NOT EDIT!

package gazebo_msgs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Color struct {
	R                *float32 `protobuf:"fixed32,2,req,name=r" json:"r,omitempty"`
	G                *float32 `protobuf:"fixed32,3,req,name=g" json:"g,omitempty"`
	B                *float32 `protobuf:"fixed32,4,req,name=b" json:"b,omitempty"`
	A                *float32 `protobuf:"fixed32,5,opt,name=a,def=1" json:"a,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Color) Reset()                    { *m = Color{} }
func (m *Color) String() string            { return proto.CompactTextString(m) }
func (*Color) ProtoMessage()               {}
func (*Color) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{0} }

const Default_Color_A float32 = 1

func (m *Color) GetR() float32 {
	if m != nil && m.R != nil {
		return *m.R
	}
	return 0
}

func (m *Color) GetG() float32 {
	if m != nil && m.G != nil {
		return *m.G
	}
	return 0
}

func (m *Color) GetB() float32 {
	if m != nil && m.B != nil {
		return *m.B
	}
	return 0
}

func (m *Color) GetA() float32 {
	if m != nil && m.A != nil {
		return *m.A
	}
	return Default_Color_A
}

func init() {
	proto.RegisterType((*Color)(nil), "gazebo.msgs.Color")
}

func init() { proto.RegisterFile("color.proto", fileDescriptor11) }

var fileDescriptor11 = []byte{
	// 92 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0xce, 0xcf, 0xc9,
	0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4e, 0x4f, 0xac, 0x4a, 0x4d, 0xca, 0xd7,
	0xcb, 0x2d, 0x4e, 0x2f, 0x56, 0x32, 0xe3, 0x62, 0x75, 0x06, 0xc9, 0x09, 0x71, 0x72, 0x31, 0x16,
	0x49, 0x30, 0x29, 0x30, 0x69, 0x30, 0x81, 0x98, 0xe9, 0x12, 0xcc, 0x30, 0x66, 0x92, 0x04, 0x0b,
	0x98, 0xc9, 0xc3, 0xc5, 0x98, 0x28, 0xc1, 0xaa, 0xc0, 0xa8, 0xc1, 0x64, 0xc5, 0x68, 0x08, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x46, 0x42, 0xaa, 0xf1, 0x52, 0x00, 0x00, 0x00,
}
