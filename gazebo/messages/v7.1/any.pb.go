// Code generated by protoc-gen-go.
// source: any.proto
// DO NOT EDIT!

package gazebo_msgs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// / \brief The type of data the message contains.
type Any_ValueType int32

const (
	// / \brief Indicates that the message is empty
	Any_NONE Any_ValueType = 1
	// / \brief Indicates that the message contains a double
	Any_DOUBLE Any_ValueType = 2
	// / \brief Indicates that the message contains an int32
	Any_INT32 Any_ValueType = 3
	// / \brief Indicates that the message contains a string
	Any_STRING Any_ValueType = 4
	// / \brief Indicates that the message contains a Boolean
	Any_BOOLEAN Any_ValueType = 5
	// / \brief Indicates that the message contains a Vector3d
	Any_VECTOR3D Any_ValueType = 6
	// / \brief Indicates that the message contains a Color
	Any_COLOR Any_ValueType = 7
	// / \brief Indicates that the message contains a Pose
	Any_POSE3D Any_ValueType = 8
	// / \brief Indicates that the message contains a Quaternion
	Any_QUATERNIOND Any_ValueType = 9
	// / \brief Indicates that the message contains a Time
	Any_TIME Any_ValueType = 10
)

var Any_ValueType_name = map[int32]string{
	1:  "NONE",
	2:  "DOUBLE",
	3:  "INT32",
	4:  "STRING",
	5:  "BOOLEAN",
	6:  "VECTOR3D",
	7:  "COLOR",
	8:  "POSE3D",
	9:  "QUATERNIOND",
	10: "TIME",
}
var Any_ValueType_value = map[string]int32{
	"NONE":        1,
	"DOUBLE":      2,
	"INT32":       3,
	"STRING":      4,
	"BOOLEAN":     5,
	"VECTOR3D":    6,
	"COLOR":       7,
	"POSE3D":      8,
	"QUATERNIOND": 9,
	"TIME":        10,
}

func (x Any_ValueType) Enum() *Any_ValueType {
	p := new(Any_ValueType)
	*p = x
	return p
}
func (x Any_ValueType) String() string {
	return proto.EnumName(Any_ValueType_name, int32(x))
}
func (x *Any_ValueType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Any_ValueType_value, data, "Any_ValueType")
	if err != nil {
		return err
	}
	*x = Any_ValueType(value)
	return nil
}
func (Any_ValueType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

type Any struct {
	// / \brief Type of value that is contained in this message.
	Type *Any_ValueType `protobuf:"varint,1,req,name=type,enum=gazebo.msgs.Any_ValueType,def=1" json:"type,omitempty"`
	// / \brief A double value
	DoubleValue *float64 `protobuf:"fixed64,2,opt,name=double_value" json:"double_value,omitempty"`
	// / \brief An int32 value
	IntValue *int32 `protobuf:"varint,3,opt,name=int_value" json:"int_value,omitempty"`
	// / \brief A string value
	StringValue *string `protobuf:"bytes,4,opt,name=string_value" json:"string_value,omitempty"`
	// / \brief A boolean value
	BoolValue *bool `protobuf:"varint,5,opt,name=bool_value" json:"bool_value,omitempty"`
	// / \brief A Vector3d value
	Vector3DValue *Vector3D `protobuf:"bytes,6,opt,name=vector3d_value" json:"vector3d_value,omitempty"`
	// / \brief A Color value
	ColorValue *Color `protobuf:"bytes,7,opt,name=color_value" json:"color_value,omitempty"`
	// / \brief A Pose value
	Pose3DValue *Pose `protobuf:"bytes,8,opt,name=pose3d_value" json:"pose3d_value,omitempty"`
	// / \brief A Quaternion value
	QuaternionValue *Quaternion `protobuf:"bytes,9,opt,name=quaternion_value" json:"quaternion_value,omitempty"`
	// / \brief A Time value
	TimeValue        *Time  `protobuf:"bytes,10,opt,name=time_value" json:"time_value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Any) Reset()                    { *m = Any{} }
func (m *Any) String() string            { return proto.CompactTextString(m) }
func (*Any) ProtoMessage()               {}
func (*Any) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

const Default_Any_Type Any_ValueType = Any_NONE

func (m *Any) GetType() Any_ValueType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_Any_Type
}

func (m *Any) GetDoubleValue() float64 {
	if m != nil && m.DoubleValue != nil {
		return *m.DoubleValue
	}
	return 0
}

func (m *Any) GetIntValue() int32 {
	if m != nil && m.IntValue != nil {
		return *m.IntValue
	}
	return 0
}

func (m *Any) GetStringValue() string {
	if m != nil && m.StringValue != nil {
		return *m.StringValue
	}
	return ""
}

func (m *Any) GetBoolValue() bool {
	if m != nil && m.BoolValue != nil {
		return *m.BoolValue
	}
	return false
}

func (m *Any) GetVector3DValue() *Vector3D {
	if m != nil {
		return m.Vector3DValue
	}
	return nil
}

func (m *Any) GetColorValue() *Color {
	if m != nil {
		return m.ColorValue
	}
	return nil
}

func (m *Any) GetPose3DValue() *Pose {
	if m != nil {
		return m.Pose3DValue
	}
	return nil
}

func (m *Any) GetQuaternionValue() *Quaternion {
	if m != nil {
		return m.QuaternionValue
	}
	return nil
}

func (m *Any) GetTimeValue() *Time {
	if m != nil {
		return m.TimeValue
	}
	return nil
}

func init() {
	proto.RegisterType((*Any)(nil), "gazebo.msgs.Any")
	proto.RegisterEnum("gazebo.msgs.Any_ValueType", Any_ValueType_name, Any_ValueType_value)
}

func init() { proto.RegisterFile("any.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0x4f, 0xcf, 0x9a, 0x40,
	0x10, 0xc6, 0x83, 0x80, 0xc2, 0x60, 0xec, 0x3a, 0x69, 0x53, 0xe3, 0xc9, 0x98, 0x34, 0xf5, 0x52,
	0x92, 0xea, 0xad, 0x37, 0xff, 0x90, 0x86, 0xc4, 0xb2, 0x8a, 0xe8, 0xb5, 0x41, 0x25, 0x86, 0x04,
	0x59, 0x0b, 0x68, 0x62, 0xef, 0xfd, 0xb4, 0xfd, 0x12, 0xef, 0x2e, 0xae, 0x44, 0x92, 0xf7, 0x06,
	0xbf, 0xe7, 0xb7, 0x33, 0x93, 0x07, 0xcc, 0x30, 0xbd, 0xdb, 0x97, 0x8c, 0x15, 0x0c, 0xad, 0x53,
	0xf8, 0x37, 0xda, 0x33, 0xfb, 0x9c, 0x9f, 0xf2, 0xbe, 0x75, 0x60, 0x09, 0xcb, 0x1e, 0x49, 0x1f,
	0x2e, 0x2c, 0x8f, 0xe4, 0x37, 0xf9, 0x73, 0x0d, 0x8b, 0x28, 0x4b, 0x63, 0x96, 0x3e, 0xd3, 0x22,
	0x3e, 0x3f, 0xd3, 0xce, 0x2d, 0x3a, 0x14, 0x2c, 0x9b, 0x1c, 0x1f, 0xff, 0xc3, 0xff, 0x2a, 0xa8,
	0xd3, 0xf4, 0x8e, 0x36, 0x68, 0xc5, 0xfd, 0x12, 0xf5, 0x94, 0x41, 0x63, 0xd4, 0x19, 0xf7, 0xed,
	0x97, 0x55, 0x36, 0xcf, 0xed, 0x5d, 0x98, 0x5c, 0xa3, 0x80, 0x1b, 0x3f, 0x34, 0x8f, 0x7a, 0x0e,
	0x7e, 0x84, 0xf6, 0x91, 0x5d, 0xf7, 0x49, 0xf4, 0xfb, 0x26, 0x92, 0x5e, 0x63, 0xa0, 0x8c, 0x14,
	0xec, 0x82, 0x19, 0xa7, 0x85, 0x44, 0x2a, 0x47, 0xba, 0x10, 0xf3, 0x22, 0x8b, 0xd3, 0x93, 0xa4,
	0x1a, 0xa7, 0x26, 0x22, 0xc0, 0x9e, 0xb1, 0x44, 0x32, 0x9d, 0x33, 0x03, 0xbf, 0x41, 0x75, 0x9c,
	0xe4, 0x4d, 0xce, 0xad, 0xf1, 0xa7, 0xda, 0x31, 0x3b, 0xa9, 0xe0, 0x57, 0x78, 0x54, 0x20, 0xdd,
	0x56, 0xe9, 0x62, 0xcd, 0x9d, 0x8b, 0x9c, 0x8b, 0x6d, 0x51, 0x4f, 0x35, 0xd5, 0x28, 0xcd, 0x6e,
	0xcd, 0x5c, 0x71, 0x01, 0xbf, 0xc3, 0x4b, 0x77, 0x52, 0x36, 0x4b, 0xf9, 0x73, 0x4d, 0x5e, 0x57,
	0x12, 0x7e, 0x81, 0xb2, 0x5c, 0x29, 0xc3, 0x3b, 0x93, 0x03, 0x1e, 0x0f, 0xff, 0x29, 0x60, 0x56,
	0x0d, 0xa2, 0x01, 0x65, 0x87, 0x44, 0xe1, 0x2d, 0x34, 0x17, 0x74, 0x3b, 0x5b, 0x3a, 0xa4, 0x81,
	0x26, 0xe8, 0xae, 0x17, 0x4c, 0xc6, 0x44, 0x15, 0x78, 0x13, 0xf8, 0xae, 0xf7, 0x93, 0x68, 0x68,
	0x41, 0x6b, 0x46, 0xe9, 0xd2, 0x99, 0x7a, 0x44, 0xc7, 0x36, 0x18, 0x3b, 0x67, 0x1e, 0x50, 0x7f,
	0xb2, 0x20, 0x4d, 0xf1, 0x62, 0x4e, 0x97, 0xd4, 0x27, 0x2d, 0xf1, 0x62, 0x45, 0x37, 0x0e, 0xc7,
	0x06, 0x7e, 0x00, 0x6b, 0xbd, 0x9d, 0x06, 0x8e, 0xef, 0xb9, 0xd4, 0x5b, 0x10, 0x53, 0xec, 0x0b,
	0xdc, 0x5f, 0x0e, 0x81, 0xb7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x14, 0xb0, 0x11, 0xb7, 0x4d, 0x02,
	0x00, 0x00,
}
