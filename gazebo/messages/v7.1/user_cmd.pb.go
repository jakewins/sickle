// Code generated by protoc-gen-go.
// source: user_cmd.proto
// DO NOT EDIT!

package gazebo_msgs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// / \brief Types of user commands
type UserCmd_Type int32

const (
	// / \brief Moving an entity.
	UserCmd_MOVING UserCmd_Type = 1
	// / \brief Controlling the world.
	UserCmd_WORLD_CONTROL UserCmd_Type = 2
	// / \brief Applying wrench.
	UserCmd_WRENCH UserCmd_Type = 3
	// / \brief Scaling an entity.
	UserCmd_SCALING UserCmd_Type = 4
)

var UserCmd_Type_name = map[int32]string{
	1: "MOVING",
	2: "WORLD_CONTROL",
	3: "WRENCH",
	4: "SCALING",
}
var UserCmd_Type_value = map[string]int32{
	"MOVING":        1,
	"WORLD_CONTROL": 2,
	"WRENCH":        3,
	"SCALING":       4,
}

func (x UserCmd_Type) Enum() *UserCmd_Type {
	p := new(UserCmd_Type)
	*p = x
	return p
}
func (x UserCmd_Type) String() string {
	return proto.EnumName(UserCmd_Type_name, int32(x))
}
func (x *UserCmd_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UserCmd_Type_value, data, "UserCmd_Type")
	if err != nil {
		return err
	}
	*x = UserCmd_Type(value)
	return nil
}
func (UserCmd_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor114, []int{0, 0} }

type UserCmd struct {
	// / \brief Unique id for user command.
	Id *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// / \brief Description for the command.
	Description *string `protobuf:"bytes,2,req,name=description" json:"description,omitempty"`
	// / \brief Type of command.
	Type *UserCmd_Type `protobuf:"varint,3,req,name=type,enum=gazebo.msgs.UserCmd_Type" json:"type,omitempty"`
	// / \brief For model modify commands.
	Model []*Model `protobuf:"bytes,4,rep,name=model" json:"model,omitempty"`
	// / \brief For light modify commands.
	Light []*Light `protobuf:"bytes,5,rep,name=light" json:"light,omitempty"`
	// / \brief Name of entity targeted by command
	EntityName *string `protobuf:"bytes,6,opt,name=entity_name" json:"entity_name,omitempty"`
	// / \brief For World Control commands.
	WorldControl *WorldControl `protobuf:"bytes,7,opt,name=world_control" json:"world_control,omitempty"`
	// / \brief Wrench for apply wrench commands.
	Wrench           *Wrench `protobuf:"bytes,8,opt,name=wrench" json:"wrench,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserCmd) Reset()                    { *m = UserCmd{} }
func (m *UserCmd) String() string            { return proto.CompactTextString(m) }
func (*UserCmd) ProtoMessage()               {}
func (*UserCmd) Descriptor() ([]byte, []int) { return fileDescriptor114, []int{0} }

func (m *UserCmd) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *UserCmd) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *UserCmd) GetType() UserCmd_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return UserCmd_MOVING
}

func (m *UserCmd) GetModel() []*Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *UserCmd) GetLight() []*Light {
	if m != nil {
		return m.Light
	}
	return nil
}

func (m *UserCmd) GetEntityName() string {
	if m != nil && m.EntityName != nil {
		return *m.EntityName
	}
	return ""
}

func (m *UserCmd) GetWorldControl() *WorldControl {
	if m != nil {
		return m.WorldControl
	}
	return nil
}

func (m *UserCmd) GetWrench() *Wrench {
	if m != nil {
		return m.Wrench
	}
	return nil
}

func init() {
	proto.RegisterType((*UserCmd)(nil), "gazebo.msgs.UserCmd")
	proto.RegisterEnum("gazebo.msgs.UserCmd_Type", UserCmd_Type_name, UserCmd_Type_value)
}

func init() { proto.RegisterFile("user_cmd.proto", fileDescriptor114) }

var fileDescriptor114 = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x8f, 0xc1, 0x4e, 0xb3, 0x40,
	0x10, 0x80, 0x53, 0x4a, 0xdb, 0xbf, 0xb3, 0x3f, 0x0d, 0x2e, 0x97, 0xb5, 0x27, 0xac, 0x07, 0x39,
	0x11, 0xd3, 0x07, 0x30, 0x31, 0x68, 0xd4, 0x84, 0x42, 0x82, 0x55, 0x8e, 0xa4, 0xb2, 0x1b, 0x4a,
	0x02, 0x2c, 0x59, 0xd6, 0x34, 0xf5, 0xfd, 0x7c, 0x2f, 0x59, 0xa8, 0x89, 0x18, 0x8f, 0x33, 0xdf,
	0x97, 0xc9, 0x37, 0xb0, 0x78, 0x6f, 0x98, 0x48, 0xd2, 0x92, 0xba, 0xb5, 0xe0, 0x92, 0x63, 0x94,
	0xed, 0x3e, 0xd8, 0x1b, 0x77, 0xcb, 0x26, 0x6b, 0x96, 0xa8, 0xc8, 0xb3, 0xbd, 0xec, 0xc9, 0x12,
	0x95, 0x9c, 0xb2, 0xe2, 0x34, 0x58, 0x07, 0x2e, 0x0a, 0x9a, 0xa4, 0xbc, 0x92, 0x82, 0x7f, 0x2f,
	0xff, 0x1f, 0x04, 0xab, 0xd2, 0x7d, 0x3f, 0xad, 0x3e, 0x35, 0x98, 0xbd, 0xb4, 0xc7, 0xbd, 0x92,
	0x62, 0x00, 0x2d, 0xa7, 0x64, 0x64, 0x8f, 0x1c, 0x03, 0x5b, 0x80, 0x28, 0x6b, 0x52, 0x91, 0xd7,
	0x32, 0xe7, 0x15, 0xd1, 0x6c, 0xcd, 0x99, 0xe3, 0x2b, 0xd0, 0xe5, 0xb1, 0x66, 0x64, 0xdc, 0x4e,
	0x8b, 0xf5, 0xb9, 0xfb, 0xa3, 0xc2, 0x3d, 0x1d, 0x71, 0xb7, 0xad, 0x80, 0x2f, 0x60, 0xd2, 0x75,
	0x10, 0xdd, 0x1e, 0x3b, 0x68, 0x8d, 0x07, 0xe6, 0x46, 0x11, 0xa5, 0x74, 0xdd, 0x64, 0xf2, 0x87,
	0xe2, 0x2b, 0xa2, 0x1a, 0x58, 0x25, 0x73, 0x79, 0x4c, 0xaa, 0x5d, 0xc9, 0xc8, 0xb4, 0x0d, 0x9b,
	0xe3, 0x6b, 0x30, 0x06, 0x5f, 0x91, 0x59, 0xbb, 0x46, 0xbf, 0x62, 0x62, 0x65, 0x78, 0xbd, 0x80,
	0x2f, 0x61, 0xda, 0xbf, 0x4c, 0xfe, 0x75, 0xaa, 0x35, 0x54, 0x3b, 0xb4, 0xba, 0x01, 0xbd, 0x2b,
	0x07, 0x98, 0x6e, 0xc2, 0xd7, 0xa7, 0xe0, 0xc1, 0x1c, 0xe1, 0x33, 0x30, 0xe2, 0x30, 0xf2, 0xef,
	0x12, 0x2f, 0x0c, 0xb6, 0x51, 0xe8, 0x9b, 0x9a, 0xc2, 0x71, 0x74, 0x1f, 0x78, 0x8f, 0xe6, 0x18,
	0x23, 0x98, 0x3d, 0x7b, 0xb7, 0xbe, 0x72, 0xf5, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x51, 0x3f,
	0x7d, 0x51, 0xa2, 0x01, 0x00, 0x00,
}
