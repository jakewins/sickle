// Code generated by protoc-gen-go.
// source: sensor.proto
// DO NOT EDIT!

package gazebo_msgs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Sensor struct {
	// / \brief Name of the sensor
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// / \brief Id of the sensor
	Id *uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	// / \brief Name of the parent, usually a link or joint.
	Parent *string `protobuf:"bytes,3,req,name=parent" json:"parent,omitempty"`
	// / \brief Id of the parent, usually a link or joint.
	ParentId *uint32 `protobuf:"varint,4,opt,name=parent_id" json:"parent_id,omitempty"`
	// / \brief Sensor type
	Type *string `protobuf:"bytes,5,req,name=type" json:"type,omitempty"`
	// / \brief True indicates that the sensor should always
	// / produce data, instead of producing data only when
	// / a consumer is connected to the data topic
	AlwaysOn *bool `protobuf:"varint,6,opt,name=always_on" json:"always_on,omitempty"`
	// / \brief Refresh rate
	UpdateRate *float64 `protobuf:"fixed64,7,opt,name=update_rate" json:"update_rate,omitempty"`
	// / \brief Sensor pose
	Pose *Pose `protobuf:"bytes,8,opt,name=pose" json:"pose,omitempty"`
	// / \brief Description of a camera sensor
	Camera *CameraSensor `protobuf:"bytes,9,opt,name=camera" json:"camera,omitempty"`
	// / \brief Description of a ray (laser) sensor
	Ray *RaySensor `protobuf:"bytes,10,opt,name=ray" json:"ray,omitempty"`
	// / \brief Description of a contact sensor
	Contact *ContactSensor `protobuf:"bytes,11,opt,name=contact" json:"contact,omitempty"`
	// / \brief True value indicates that sensor data should be
	// / visualized in the GUI
	Visualize *bool `protobuf:"varint,12,opt,name=visualize" json:"visualize,omitempty"`
	// / \brief Topic on which sensor data is published
	Topic *string `protobuf:"bytes,13,opt,name=topic" json:"topic,omitempty"`
	// / \brief Description of a logical camera sensor
	LogicalCamera *LogicalCameraSensor `protobuf:"bytes,14,opt,name=logical_camera" json:"logical_camera,omitempty"`
	// / \brief Description of a gps sensor
	Gps *GPSSensor `protobuf:"bytes,15,opt,name=gps" json:"gps,omitempty"`
	// / \brief Description of an IMU sensor
	Imu              *IMUSensor `protobuf:"bytes,16,opt,name=imu" json:"imu,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Sensor) Reset()                    { *m = Sensor{} }
func (m *Sensor) String() string            { return proto.CompactTextString(m) }
func (*Sensor) ProtoMessage()               {}
func (*Sensor) Descriptor() ([]byte, []int) { return fileDescriptor97, []int{0} }

func (m *Sensor) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Sensor) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Sensor) GetParent() string {
	if m != nil && m.Parent != nil {
		return *m.Parent
	}
	return ""
}

func (m *Sensor) GetParentId() uint32 {
	if m != nil && m.ParentId != nil {
		return *m.ParentId
	}
	return 0
}

func (m *Sensor) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Sensor) GetAlwaysOn() bool {
	if m != nil && m.AlwaysOn != nil {
		return *m.AlwaysOn
	}
	return false
}

func (m *Sensor) GetUpdateRate() float64 {
	if m != nil && m.UpdateRate != nil {
		return *m.UpdateRate
	}
	return 0
}

func (m *Sensor) GetPose() *Pose {
	if m != nil {
		return m.Pose
	}
	return nil
}

func (m *Sensor) GetCamera() *CameraSensor {
	if m != nil {
		return m.Camera
	}
	return nil
}

func (m *Sensor) GetRay() *RaySensor {
	if m != nil {
		return m.Ray
	}
	return nil
}

func (m *Sensor) GetContact() *ContactSensor {
	if m != nil {
		return m.Contact
	}
	return nil
}

func (m *Sensor) GetVisualize() bool {
	if m != nil && m.Visualize != nil {
		return *m.Visualize
	}
	return false
}

func (m *Sensor) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *Sensor) GetLogicalCamera() *LogicalCameraSensor {
	if m != nil {
		return m.LogicalCamera
	}
	return nil
}

func (m *Sensor) GetGps() *GPSSensor {
	if m != nil {
		return m.Gps
	}
	return nil
}

func (m *Sensor) GetImu() *IMUSensor {
	if m != nil {
		return m.Imu
	}
	return nil
}

func init() {
	proto.RegisterType((*Sensor)(nil), "gazebo.msgs.Sensor")
}

func init() { proto.RegisterFile("sensor.proto", fileDescriptor97) }

var fileDescriptor97 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x91, 0x4b, 0x4b, 0xfb, 0x40,
	0x14, 0xc5, 0xe9, 0x2b, 0x6d, 0x6e, 0xfa, 0x9c, 0xc2, 0x9f, 0xfb, 0x8f, 0x0b, 0x8b, 0x6e, 0x2a,
	0x42, 0x16, 0xae, 0xdc, 0xbb, 0x10, 0x41, 0xa1, 0x58, 0x5c, 0x87, 0x31, 0x1d, 0x42, 0x20, 0xcd,
	0x0c, 0x99, 0xa9, 0xd2, 0x7e, 0x39, 0xbf, 0x9a, 0xd7, 0x99, 0x88, 0x9d, 0xd2, 0xcd, 0xc0, 0x3d,
	0xe7, 0x37, 0x87, 0xfb, 0x80, 0xa1, 0x16, 0x95, 0x96, 0x75, 0xa2, 0x6a, 0x69, 0x24, 0x8b, 0x72,
	0x7e, 0x10, 0xef, 0x32, 0xd9, 0xea, 0x5c, 0xc7, 0xa0, 0xa4, 0x16, 0xce, 0x88, 0x59, 0xc6, 0xb7,
	0xa2, 0xe6, 0xc7, 0x70, 0x3c, 0xa9, 0xf9, 0xde, 0x13, 0xe6, 0x99, 0xac, 0x0c, 0xcf, 0x8c, 0x27,
	0x5e, 0x94, 0x32, 0x2f, 0x32, 0x5e, 0xa6, 0x2e, 0x21, 0xf5, 0xcc, 0x69, 0xae, 0xf4, 0x89, 0x52,
	0x6c, 0x77, 0x9e, 0x72, 0xf5, 0xd5, 0x81, 0x60, 0x6d, 0x05, 0x36, 0x84, 0x6e, 0x45, 0x29, 0xd8,
	0x5a, 0xb4, 0x97, 0x21, 0x03, 0x68, 0x17, 0x1b, 0x6c, 0x2f, 0x5a, 0xcb, 0x11, 0x1b, 0x43, 0xa0,
	0x78, 0x2d, 0x2a, 0x83, 0x1d, 0xeb, 0xcd, 0x20, 0x74, 0x75, 0x4a, 0x48, 0xd7, 0x22, 0xf4, 0xd9,
	0xec, 0x95, 0xc0, 0xde, 0x2f, 0xc0, 0xcb, 0x4f, 0x1a, 0x20, 0x95, 0x15, 0x06, 0x04, 0x0c, 0xd8,
	0x1c, 0xa2, 0x9d, 0xda, 0x70, 0x23, 0xd2, 0x9a, 0x1e, 0xec, 0x93, 0xd8, 0x62, 0x97, 0xd0, 0xfd,
	0x59, 0x03, 0x0e, 0xa8, 0x8a, 0xee, 0x66, 0xc9, 0xd1, 0x82, 0x92, 0x15, 0x19, 0xec, 0x06, 0x02,
	0x37, 0x19, 0x86, 0x16, 0xf9, 0xef, 0x21, 0x0f, 0xd6, 0x6a, 0xda, 0xbf, 0x86, 0x0e, 0xad, 0x0c,
	0xc1, 0x72, 0xff, 0x3c, 0xee, 0x95, 0xef, 0x1b, 0xe8, 0x16, 0xfa, 0xcd, 0x1a, 0x31, 0xb2, 0x60,
	0xec, 0x07, 0x3a, 0xaf, 0x81, 0x69, 0x8a, 0x8f, 0x42, 0xef, 0x78, 0x59, 0x1c, 0x04, 0x0e, 0xed,
	0x14, 0x23, 0xe8, 0x19, 0xa9, 0x8a, 0x0c, 0x47, 0x54, 0x86, 0xec, 0x1e, 0xc6, 0xfe, 0x01, 0x70,
	0x6c, 0x53, 0x17, 0x5e, 0xea, 0xb3, 0x43, 0x4e, 0xbb, 0xa5, 0xeb, 0xe0, 0xe4, 0x4c, 0xb7, 0x8f,
	0xab, 0xf5, 0x1f, 0x44, 0x07, 0xc3, 0xe9, 0x19, 0xe8, 0xe9, 0xe5, 0xcd, 0x41, 0xdf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x15, 0x6b, 0x1c, 0xd1, 0x64, 0x02, 0x00, 0x00,
}
