// Code generated by protoc-gen-go.
// source: raysensor.proto
// DO NOT EDIT!

package gazebo_msgs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RaySensor struct {
	DisplayScan          *bool    `protobuf:"varint,1,opt,name=display_scan" json:"display_scan,omitempty"`
	HorizontalSamples    *int32   `protobuf:"varint,2,opt,name=horizontal_samples" json:"horizontal_samples,omitempty"`
	HorizontalResolution *float64 `protobuf:"fixed64,3,opt,name=horizontal_resolution" json:"horizontal_resolution,omitempty"`
	HorizontalMinAngle   *float64 `protobuf:"fixed64,4,opt,name=horizontal_min_angle" json:"horizontal_min_angle,omitempty"`
	HorizontalMaxAngle   *float64 `protobuf:"fixed64,5,opt,name=horizontal_max_angle" json:"horizontal_max_angle,omitempty"`
	VerticalSamples      *int32   `protobuf:"varint,6,opt,name=vertical_samples" json:"vertical_samples,omitempty"`
	VerticalResolution   *float64 `protobuf:"fixed64,7,opt,name=vertical_resolution" json:"vertical_resolution,omitempty"`
	VerticalMinAngle     *float64 `protobuf:"fixed64,8,opt,name=vertical_min_angle" json:"vertical_min_angle,omitempty"`
	VerticalMaxAngle     *float64 `protobuf:"fixed64,9,opt,name=vertical_max_angle" json:"vertical_max_angle,omitempty"`
	RangeMin             *float64 `protobuf:"fixed64,10,opt,name=range_min" json:"range_min,omitempty"`
	RangeMax             *float64 `protobuf:"fixed64,11,opt,name=range_max" json:"range_max,omitempty"`
	RangeResolution      *float64 `protobuf:"fixed64,12,opt,name=range_resolution" json:"range_resolution,omitempty"`
	XXX_unrecognized     []byte   `json:"-"`
}

func (m *RaySensor) Reset()                    { *m = RaySensor{} }
func (m *RaySensor) String() string            { return proto.CompactTextString(m) }
func (*RaySensor) ProtoMessage()               {}
func (*RaySensor) Descriptor() ([]byte, []int) { return fileDescriptor86, []int{0} }

func (m *RaySensor) GetDisplayScan() bool {
	if m != nil && m.DisplayScan != nil {
		return *m.DisplayScan
	}
	return false
}

func (m *RaySensor) GetHorizontalSamples() int32 {
	if m != nil && m.HorizontalSamples != nil {
		return *m.HorizontalSamples
	}
	return 0
}

func (m *RaySensor) GetHorizontalResolution() float64 {
	if m != nil && m.HorizontalResolution != nil {
		return *m.HorizontalResolution
	}
	return 0
}

func (m *RaySensor) GetHorizontalMinAngle() float64 {
	if m != nil && m.HorizontalMinAngle != nil {
		return *m.HorizontalMinAngle
	}
	return 0
}

func (m *RaySensor) GetHorizontalMaxAngle() float64 {
	if m != nil && m.HorizontalMaxAngle != nil {
		return *m.HorizontalMaxAngle
	}
	return 0
}

func (m *RaySensor) GetVerticalSamples() int32 {
	if m != nil && m.VerticalSamples != nil {
		return *m.VerticalSamples
	}
	return 0
}

func (m *RaySensor) GetVerticalResolution() float64 {
	if m != nil && m.VerticalResolution != nil {
		return *m.VerticalResolution
	}
	return 0
}

func (m *RaySensor) GetVerticalMinAngle() float64 {
	if m != nil && m.VerticalMinAngle != nil {
		return *m.VerticalMinAngle
	}
	return 0
}

func (m *RaySensor) GetVerticalMaxAngle() float64 {
	if m != nil && m.VerticalMaxAngle != nil {
		return *m.VerticalMaxAngle
	}
	return 0
}

func (m *RaySensor) GetRangeMin() float64 {
	if m != nil && m.RangeMin != nil {
		return *m.RangeMin
	}
	return 0
}

func (m *RaySensor) GetRangeMax() float64 {
	if m != nil && m.RangeMax != nil {
		return *m.RangeMax
	}
	return 0
}

func (m *RaySensor) GetRangeResolution() float64 {
	if m != nil && m.RangeResolution != nil {
		return *m.RangeResolution
	}
	return 0
}

func init() {
	proto.RegisterType((*RaySensor)(nil), "gazebo.msgs.RaySensor")
}

func init() { proto.RegisterFile("raysensor.proto", fileDescriptor86) }

var fileDescriptor86 = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0xce, 0xdd, 0x4e, 0x85, 0x30,
	0x0c, 0xc0, 0xf1, 0x70, 0xf4, 0x28, 0x14, 0x12, 0x75, 0x62, 0xb2, 0xf8, 0x91, 0x18, 0xaf, 0xbc,
	0xe2, 0x61, 0xf4, 0x01, 0x48, 0xc5, 0x05, 0x97, 0x8c, 0x95, 0xac, 0xd3, 0x00, 0x2f, 0xe8, 0x6b,
	0x39, 0xa6, 0xe2, 0xa2, 0x5e, 0xae, 0xbf, 0x35, 0xff, 0xc2, 0x89, 0xc3, 0x99, 0x95, 0x65, 0x72,
	0xcd, 0xe8, 0xc8, 0x93, 0x28, 0x7b, 0x5c, 0xd4, 0x13, 0x35, 0x03, 0xf7, 0x7c, 0xf7, 0xbe, 0x83,
	0xe2, 0x01, 0xe7, 0xc7, 0xf8, 0x41, 0xd4, 0x50, 0x3d, 0x6b, 0x1e, 0x0d, 0xce, 0x2d, 0x77, 0x68,
	0x65, 0x76, 0x9b, 0xdd, 0xe7, 0xe2, 0x12, 0xc4, 0x0b, 0x39, 0xbd, 0x90, 0xf5, 0x68, 0x5a, 0xc6,
	0x61, 0x34, 0x8a, 0xe5, 0x2e, 0xd8, 0x5e, 0xdc, 0xc0, 0x45, 0x62, 0x4e, 0x31, 0x99, 0x57, 0xaf,
	0xc9, 0xca, 0x83, 0xc0, 0x99, 0xb8, 0x86, 0x3a, 0xe1, 0x41, 0xdb, 0x16, 0x6d, 0x6f, 0x94, 0x3c,
	0xfc, 0x4f, 0x71, 0xfa, 0xd2, 0x7d, 0x54, 0x09, 0xa7, 0x6f, 0xca, 0x79, 0xdd, 0x25, 0xd1, 0xa3,
	0x18, 0xbd, 0x82, 0xf3, 0x4d, 0x92, 0xe4, 0x71, 0x5c, 0x0b, 0xd7, 0x6e, 0xf8, 0x13, 0xcc, 0xff,
	0xda, 0x96, 0x2b, 0xa2, 0x9d, 0x41, 0xe1, 0xc2, 0x5b, 0xad, 0x4b, 0x12, 0x7e, 0x8d, 0x70, 0x92,
	0xe5, 0xf7, 0x51, 0x9f, 0xa3, 0xa4, 0x5b, 0xad, 0xf2, 0x11, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x4d,
	0xff, 0xab, 0x68, 0x01, 0x00, 0x00,
}
