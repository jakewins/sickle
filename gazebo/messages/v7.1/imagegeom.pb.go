// Code generated by protoc-gen-go.
// source: imagegeom.proto
// DO NOT EDIT!

package gazebo_msgs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ImageGeom struct {
	Uri              *string  `protobuf:"bytes,1,req,name=uri" json:"uri,omitempty"`
	Scale            *float64 `protobuf:"fixed64,2,opt,name=scale" json:"scale,omitempty"`
	Threshold        *int32   `protobuf:"varint,3,opt,name=threshold,def=255" json:"threshold,omitempty"`
	Height           *float64 `protobuf:"fixed64,4,opt,name=height" json:"height,omitempty"`
	Granularity      *int32   `protobuf:"varint,5,opt,name=granularity" json:"granularity,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ImageGeom) Reset()                    { *m = ImageGeom{} }
func (m *ImageGeom) String() string            { return proto.CompactTextString(m) }
func (*ImageGeom) ProtoMessage()               {}
func (*ImageGeom) Descriptor() ([]byte, []int) { return fileDescriptor34, []int{0} }

const Default_ImageGeom_Threshold int32 = 255

func (m *ImageGeom) GetUri() string {
	if m != nil && m.Uri != nil {
		return *m.Uri
	}
	return ""
}

func (m *ImageGeom) GetScale() float64 {
	if m != nil && m.Scale != nil {
		return *m.Scale
	}
	return 0
}

func (m *ImageGeom) GetThreshold() int32 {
	if m != nil && m.Threshold != nil {
		return *m.Threshold
	}
	return Default_ImageGeom_Threshold
}

func (m *ImageGeom) GetHeight() float64 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return 0
}

func (m *ImageGeom) GetGranularity() int32 {
	if m != nil && m.Granularity != nil {
		return *m.Granularity
	}
	return 0
}

func init() {
	proto.RegisterType((*ImageGeom)(nil), "gazebo.msgs.ImageGeom")
}

func init() { proto.RegisterFile("imagegeom.proto", fileDescriptor34) }

var fileDescriptor34 = []byte{
	// 146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x1c, 0xca, 0xb1, 0x0a, 0xc2, 0x30,
	0x10, 0x80, 0x61, 0xda, 0x18, 0x21, 0x17, 0x54, 0x88, 0x20, 0x19, 0x8b, 0x53, 0xa7, 0x0e, 0x42,
	0x17, 0x5f, 0x40, 0x7c, 0x8c, 0x68, 0x8f, 0x4b, 0x20, 0x31, 0x72, 0x49, 0x07, 0x7d, 0x7a, 0x5b,
	0xd7, 0xff, 0xff, 0xe0, 0x10, 0x92, 0x23, 0x24, 0xcc, 0x69, 0x78, 0x73, 0xae, 0xd9, 0x68, 0x72,
	0x5f, 0x7c, 0xe4, 0x21, 0x15, 0x2a, 0xe7, 0x09, 0xd4, 0x7d, 0xfd, 0xb7, 0xe5, 0x1b, 0x0d, 0x62,
	0xe6, 0x60, 0x9b, 0xae, 0xed, 0x95, 0xd9, 0x81, 0x2c, 0x4f, 0x17, 0xd1, 0xb6, 0x5d, 0xd3, 0x37,
	0xe6, 0x04, 0xaa, 0x7a, 0xc6, 0xe2, 0x73, 0x9c, 0xac, 0x58, 0x92, 0xbc, 0x8a, 0xcb, 0x38, 0x9a,
	0x3d, 0x6c, 0x3d, 0x06, 0xf2, 0xd5, 0x6e, 0xfe, 0xee, 0x08, 0x9a, 0xd8, 0xbd, 0xe6, 0xe8, 0x38,
	0xd4, 0x8f, 0x95, 0xab, 0xfc, 0x05, 0x00, 0x00, 0xff, 0xff, 0xe4, 0xab, 0x92, 0xc9, 0x84, 0x00,
	0x00, 0x00,
}
