// Code generated by protoc-gen-go.
// source: laserscan.proto
// DO NOT EDIT!

package gazebo_msgs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LaserScan struct {
	Frame             *string   `protobuf:"bytes,1,req,name=frame" json:"frame,omitempty"`
	WorldPose         *Pose     `protobuf:"bytes,2,req,name=world_pose" json:"world_pose,omitempty"`
	AngleMin          *float64  `protobuf:"fixed64,3,req,name=angle_min" json:"angle_min,omitempty"`
	AngleMax          *float64  `protobuf:"fixed64,4,req,name=angle_max" json:"angle_max,omitempty"`
	AngleStep         *float64  `protobuf:"fixed64,5,req,name=angle_step" json:"angle_step,omitempty"`
	RangeMin          *float64  `protobuf:"fixed64,6,req,name=range_min" json:"range_min,omitempty"`
	RangeMax          *float64  `protobuf:"fixed64,7,req,name=range_max" json:"range_max,omitempty"`
	Count             *uint32   `protobuf:"varint,8,req,name=count" json:"count,omitempty"`
	VerticalAngleMin  *float64  `protobuf:"fixed64,9,opt,name=vertical_angle_min" json:"vertical_angle_min,omitempty"`
	VerticalAngleMax  *float64  `protobuf:"fixed64,10,opt,name=vertical_angle_max" json:"vertical_angle_max,omitempty"`
	VerticalAngleStep *float64  `protobuf:"fixed64,11,opt,name=vertical_angle_step" json:"vertical_angle_step,omitempty"`
	VerticalCount     *uint32   `protobuf:"varint,12,opt,name=vertical_count" json:"vertical_count,omitempty"`
	Ranges            []float64 `protobuf:"fixed64,13,rep,name=ranges" json:"ranges,omitempty"`
	Intensities       []float64 `protobuf:"fixed64,14,rep,name=intensities" json:"intensities,omitempty"`
	XXX_unrecognized  []byte    `json:"-"`
}

func (m *LaserScan) Reset()                    { *m = LaserScan{} }
func (m *LaserScan) String() string            { return proto.CompactTextString(m) }
func (*LaserScan) ProtoMessage()               {}
func (*LaserScan) Descriptor() ([]byte, []int) { return fileDescriptor48, []int{0} }

func (m *LaserScan) GetFrame() string {
	if m != nil && m.Frame != nil {
		return *m.Frame
	}
	return ""
}

func (m *LaserScan) GetWorldPose() *Pose {
	if m != nil {
		return m.WorldPose
	}
	return nil
}

func (m *LaserScan) GetAngleMin() float64 {
	if m != nil && m.AngleMin != nil {
		return *m.AngleMin
	}
	return 0
}

func (m *LaserScan) GetAngleMax() float64 {
	if m != nil && m.AngleMax != nil {
		return *m.AngleMax
	}
	return 0
}

func (m *LaserScan) GetAngleStep() float64 {
	if m != nil && m.AngleStep != nil {
		return *m.AngleStep
	}
	return 0
}

func (m *LaserScan) GetRangeMin() float64 {
	if m != nil && m.RangeMin != nil {
		return *m.RangeMin
	}
	return 0
}

func (m *LaserScan) GetRangeMax() float64 {
	if m != nil && m.RangeMax != nil {
		return *m.RangeMax
	}
	return 0
}

func (m *LaserScan) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *LaserScan) GetVerticalAngleMin() float64 {
	if m != nil && m.VerticalAngleMin != nil {
		return *m.VerticalAngleMin
	}
	return 0
}

func (m *LaserScan) GetVerticalAngleMax() float64 {
	if m != nil && m.VerticalAngleMax != nil {
		return *m.VerticalAngleMax
	}
	return 0
}

func (m *LaserScan) GetVerticalAngleStep() float64 {
	if m != nil && m.VerticalAngleStep != nil {
		return *m.VerticalAngleStep
	}
	return 0
}

func (m *LaserScan) GetVerticalCount() uint32 {
	if m != nil && m.VerticalCount != nil {
		return *m.VerticalCount
	}
	return 0
}

func (m *LaserScan) GetRanges() []float64 {
	if m != nil {
		return m.Ranges
	}
	return nil
}

func (m *LaserScan) GetIntensities() []float64 {
	if m != nil {
		return m.Intensities
	}
	return nil
}

func init() {
	proto.RegisterType((*LaserScan)(nil), "gazebo.msgs.LaserScan")
}

func init() { proto.RegisterFile("laserscan.proto", fileDescriptor48) }

var fileDescriptor48 = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x8e, 0xcd, 0x4a, 0xc4, 0x30,
	0x10, 0x80, 0x69, 0xd7, 0x5d, 0xed, 0xd4, 0x56, 0x76, 0x16, 0x24, 0xac, 0x97, 0x22, 0x08, 0x9e,
	0x7a, 0xf0, 0x39, 0x3c, 0x08, 0x3e, 0x40, 0x89, 0x75, 0x2c, 0x81, 0x36, 0x29, 0x99, 0xf8, 0x83,
	0x8f, 0xe7, 0x93, 0x39, 0x4d, 0x50, 0x97, 0xc5, 0x63, 0xbe, 0xef, 0x9b, 0xcc, 0xc0, 0xc5, 0xa8,
	0x99, 0x3c, 0xf7, 0xda, 0xb6, 0xb3, 0x77, 0xc1, 0x61, 0x39, 0xe8, 0x4f, 0x7a, 0x72, 0xed, 0xc4,
	0x03, 0xef, 0x61, 0x76, 0x4c, 0x49, 0x5c, 0x7f, 0xe5, 0x50, 0xdc, 0x2f, 0xf1, 0xa3, 0xc4, 0x58,
	0xc1, 0xfa, 0xc5, 0xeb, 0x89, 0x54, 0xd6, 0xe4, 0xb7, 0x05, 0xde, 0x00, 0xbc, 0x3b, 0x3f, 0x3e,
	0x77, 0xcb, 0x80, 0xca, 0x85, 0x95, 0x77, 0xdb, 0xf6, 0xe0, 0xab, 0xf6, 0x41, 0x04, 0x6e, 0xa1,
	0xd0, 0x76, 0x18, 0xa9, 0x9b, 0x8c, 0x55, 0x2b, 0xa9, 0xb2, 0x03, 0xa4, 0x3f, 0xd4, 0x49, 0x44,
	0x08, 0x90, 0x10, 0x07, 0x9a, 0xd5, 0xfa, 0x27, 0xf3, 0x02, 0xd3, 0xe4, 0xe6, 0x08, 0xc9, 0xe4,
	0x69, 0x44, 0x72, 0x55, 0xef, 0x5e, 0x6d, 0x50, 0x67, 0xf2, 0xac, 0x70, 0x0f, 0xf8, 0x46, 0x3e,
	0x98, 0x5e, 0x8f, 0xdd, 0xdf, 0xde, 0xa2, 0xc9, 0x24, 0xfd, 0xc7, 0xc9, 0x37, 0x10, 0xdd, 0x15,
	0xec, 0x8e, 0x5c, 0xbc, 0xa4, 0x8c, 0xf2, 0x12, 0xea, 0x5f, 0x99, 0x96, 0x9d, 0x0b, 0xaf, 0xb0,
	0x86, 0x4d, 0x3c, 0x87, 0x55, 0xd5, 0xac, 0xa4, 0xdb, 0x41, 0x69, 0x6c, 0x20, 0xcb, 0x26, 0x18,
	0x81, 0xf5, 0x02, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x38, 0x91, 0xcf, 0x6f, 0x01, 0x00,
	0x00,
}
