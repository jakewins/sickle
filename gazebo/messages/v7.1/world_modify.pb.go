// Code generated by protoc-gen-go.
// source: world_modify.proto
// DO NOT EDIT!

package gazebo_msgs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WorldModify struct {
	WorldName        *string `protobuf:"bytes,1,req,name=world_name" json:"world_name,omitempty"`
	Remove           *bool   `protobuf:"varint,2,opt,name=remove" json:"remove,omitempty"`
	Create           *bool   `protobuf:"varint,3,opt,name=create" json:"create,omitempty"`
	Cloned           *bool   `protobuf:"varint,4,opt,name=cloned" json:"cloned,omitempty"`
	ClonedUri        *string `protobuf:"bytes,5,opt,name=cloned_uri" json:"cloned_uri,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *WorldModify) Reset()                    { *m = WorldModify{} }
func (m *WorldModify) String() string            { return proto.CompactTextString(m) }
func (*WorldModify) ProtoMessage()               {}
func (*WorldModify) Descriptor() ([]byte, []int) { return fileDescriptor123, []int{0} }

func (m *WorldModify) GetWorldName() string {
	if m != nil && m.WorldName != nil {
		return *m.WorldName
	}
	return ""
}

func (m *WorldModify) GetRemove() bool {
	if m != nil && m.Remove != nil {
		return *m.Remove
	}
	return false
}

func (m *WorldModify) GetCreate() bool {
	if m != nil && m.Create != nil {
		return *m.Create
	}
	return false
}

func (m *WorldModify) GetCloned() bool {
	if m != nil && m.Cloned != nil {
		return *m.Cloned
	}
	return false
}

func (m *WorldModify) GetClonedUri() string {
	if m != nil && m.ClonedUri != nil {
		return *m.ClonedUri
	}
	return ""
}

func init() {
	proto.RegisterType((*WorldModify)(nil), "gazebo.msgs.WorldModify")
}

func init() { proto.RegisterFile("world_modify.proto", fileDescriptor123) }

var fileDescriptor123 = []byte{
	// 132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0xcf, 0x2f, 0xca,
	0x49, 0x89, 0xcf, 0xcd, 0x4f, 0xc9, 0x4c, 0xab, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x4e, 0x4f, 0xac, 0x4a, 0x4d, 0xca, 0xd7, 0xcb, 0x2d, 0x4e, 0x2f, 0x56, 0x4a, 0xe5, 0xe2, 0x0e,
	0x07, 0x29, 0xf1, 0x05, 0xab, 0x10, 0x12, 0xe2, 0xe2, 0x82, 0xe8, 0xc8, 0x4b, 0xcc, 0x4d, 0x95,
	0x60, 0x54, 0x60, 0xd2, 0xe0, 0x14, 0xe2, 0xe3, 0x62, 0x2b, 0x4a, 0xcd, 0xcd, 0x2f, 0x4b, 0x95,
	0x60, 0x52, 0x60, 0xd4, 0xe0, 0x00, 0xf1, 0x93, 0x8b, 0x52, 0x13, 0x4b, 0x52, 0x25, 0x98, 0xe1,
	0xfc, 0x9c, 0xfc, 0xbc, 0xd4, 0x14, 0x09, 0x16, 0x30, 0x1f, 0x68, 0x06, 0x84, 0x1f, 0x5f, 0x5a,
	0x94, 0x29, 0xc1, 0x0a, 0x14, 0xe3, 0x04, 0x04, 0x00, 0x00, 0xff, 0xff, 0xc8, 0xd9, 0xbc, 0xed,
	0x88, 0x00, 0x00, 0x00,
}
