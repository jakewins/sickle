// Code generated by protoc-gen-go.
// source: light.proto
// DO NOT EDIT!

package gazebo_msgs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Light_LightType int32

const (
	Light_POINT       Light_LightType = 1
	Light_SPOT        Light_LightType = 2
	Light_DIRECTIONAL Light_LightType = 3
)

var Light_LightType_name = map[int32]string{
	1: "POINT",
	2: "SPOT",
	3: "DIRECTIONAL",
}
var Light_LightType_value = map[string]int32{
	"POINT":       1,
	"SPOT":        2,
	"DIRECTIONAL": 3,
}

func (x Light_LightType) Enum() *Light_LightType {
	p := new(Light_LightType)
	*p = x
	return p
}
func (x Light_LightType) String() string {
	return proto.EnumName(Light_LightType_name, int32(x))
}
func (x *Light_LightType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Light_LightType_value, data, "Light_LightType")
	if err != nil {
		return err
	}
	*x = Light_LightType(value)
	return nil
}
func (Light_LightType) EnumDescriptor() ([]byte, []int) { return fileDescriptor50, []int{0, 0} }

type Light struct {
	Name                 *string          `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Type                 *Light_LightType `protobuf:"varint,2,opt,name=type,enum=gazebo.msgs.Light_LightType" json:"type,omitempty"`
	Pose                 *Pose            `protobuf:"bytes,3,opt,name=pose" json:"pose,omitempty"`
	Diffuse              *Color           `protobuf:"bytes,4,opt,name=diffuse" json:"diffuse,omitempty"`
	Specular             *Color           `protobuf:"bytes,5,opt,name=specular" json:"specular,omitempty"`
	AttenuationConstant  *float32         `protobuf:"fixed32,6,opt,name=attenuation_constant" json:"attenuation_constant,omitempty"`
	AttenuationLinear    *float32         `protobuf:"fixed32,7,opt,name=attenuation_linear" json:"attenuation_linear,omitempty"`
	AttenuationQuadratic *float32         `protobuf:"fixed32,8,opt,name=attenuation_quadratic" json:"attenuation_quadratic,omitempty"`
	Direction            *Vector3D        `protobuf:"bytes,9,opt,name=direction" json:"direction,omitempty"`
	Range                *float32         `protobuf:"fixed32,10,opt,name=range" json:"range,omitempty"`
	CastShadows          *bool            `protobuf:"varint,11,opt,name=cast_shadows" json:"cast_shadows,omitempty"`
	SpotInnerAngle       *float32         `protobuf:"fixed32,12,opt,name=spot_inner_angle" json:"spot_inner_angle,omitempty"`
	SpotOuterAngle       *float32         `protobuf:"fixed32,13,opt,name=spot_outer_angle" json:"spot_outer_angle,omitempty"`
	SpotFalloff          *float32         `protobuf:"fixed32,14,opt,name=spot_falloff" json:"spot_falloff,omitempty"`
	XXX_unrecognized     []byte           `json:"-"`
}

func (m *Light) Reset()                    { *m = Light{} }
func (m *Light) String() string            { return proto.CompactTextString(m) }
func (*Light) ProtoMessage()               {}
func (*Light) Descriptor() ([]byte, []int) { return fileDescriptor50, []int{0} }

func (m *Light) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Light) GetType() Light_LightType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Light_POINT
}

func (m *Light) GetPose() *Pose {
	if m != nil {
		return m.Pose
	}
	return nil
}

func (m *Light) GetDiffuse() *Color {
	if m != nil {
		return m.Diffuse
	}
	return nil
}

func (m *Light) GetSpecular() *Color {
	if m != nil {
		return m.Specular
	}
	return nil
}

func (m *Light) GetAttenuationConstant() float32 {
	if m != nil && m.AttenuationConstant != nil {
		return *m.AttenuationConstant
	}
	return 0
}

func (m *Light) GetAttenuationLinear() float32 {
	if m != nil && m.AttenuationLinear != nil {
		return *m.AttenuationLinear
	}
	return 0
}

func (m *Light) GetAttenuationQuadratic() float32 {
	if m != nil && m.AttenuationQuadratic != nil {
		return *m.AttenuationQuadratic
	}
	return 0
}

func (m *Light) GetDirection() *Vector3D {
	if m != nil {
		return m.Direction
	}
	return nil
}

func (m *Light) GetRange() float32 {
	if m != nil && m.Range != nil {
		return *m.Range
	}
	return 0
}

func (m *Light) GetCastShadows() bool {
	if m != nil && m.CastShadows != nil {
		return *m.CastShadows
	}
	return false
}

func (m *Light) GetSpotInnerAngle() float32 {
	if m != nil && m.SpotInnerAngle != nil {
		return *m.SpotInnerAngle
	}
	return 0
}

func (m *Light) GetSpotOuterAngle() float32 {
	if m != nil && m.SpotOuterAngle != nil {
		return *m.SpotOuterAngle
	}
	return 0
}

func (m *Light) GetSpotFalloff() float32 {
	if m != nil && m.SpotFalloff != nil {
		return *m.SpotFalloff
	}
	return 0
}

func init() {
	proto.RegisterType((*Light)(nil), "gazebo.msgs.Light")
	proto.RegisterEnum("gazebo.msgs.Light_LightType", Light_LightType_name, Light_LightType_value)
}

func init() { proto.RegisterFile("light.proto", fileDescriptor50) }

var fileDescriptor50 = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x90, 0xc1, 0x6e, 0xe2, 0x30,
	0x10, 0x86, 0x45, 0x48, 0x96, 0x64, 0x02, 0x6c, 0xd6, 0x02, 0xc9, 0x42, 0xac, 0x16, 0xb1, 0x7b,
	0x40, 0x7b, 0x88, 0xb4, 0xec, 0x13, 0x54, 0xb4, 0x07, 0x24, 0x04, 0xa8, 0x8d, 0x7a, 0x8d, 0xdc,
	0xc4, 0x09, 0x91, 0x82, 0x9d, 0xda, 0x4e, 0xab, 0xf6, 0x31, 0xfb, 0x44, 0x75, 0x0c, 0xb4, 0x70,
	0xe8, 0x25, 0xca, 0xcc, 0xf7, 0xcd, 0x3f, 0xd6, 0x80, 0x5f, 0x16, 0xf9, 0x4e, 0x85, 0x95, 0xe0,
	0x8a, 0x23, 0x3f, 0x27, 0xaf, 0xf4, 0x81, 0x87, 0x7b, 0x99, 0xcb, 0x11, 0x54, 0x5c, 0xd2, 0x03,
	0x18, 0xf5, 0x9f, 0x68, 0xa2, 0xb8, 0xf8, 0x9f, 0x1e, 0x6b, 0x3f, 0xe1, 0x25, 0x17, 0x87, 0x62,
	0xfa, 0xd6, 0x06, 0x67, 0xd5, 0xa4, 0xa0, 0x2e, 0xd8, 0x8c, 0xec, 0x29, 0x6e, 0x4d, 0xac, 0x99,
	0x87, 0xfe, 0x82, 0xad, 0x5e, 0x2a, 0x8a, 0xad, 0x49, 0x6b, 0xd6, 0x9f, 0x8f, 0xc3, 0xb3, 0xf0,
	0xd0, 0xf8, 0x87, 0x6f, 0xa4, 0x1d, 0xf4, 0x0b, 0xec, 0x66, 0x1d, 0x6e, 0x6b, 0xd7, 0x9f, 0xff,
	0xb8, 0x70, 0xb7, 0x1a, 0xa0, 0xdf, 0xd0, 0x49, 0x8b, 0x2c, 0xab, 0xb5, 0x63, 0x1b, 0x07, 0x5d,
	0x38, 0x8b, 0xe6, 0x3d, 0xe8, 0x0f, 0xb8, 0xb2, 0xa2, 0x49, 0x5d, 0x12, 0x81, 0x9d, 0x2f, 0xad,
	0x31, 0x0c, 0x88, 0x52, 0x94, 0xd5, 0x44, 0x15, 0x9c, 0xc5, 0x09, 0x67, 0x52, 0x11, 0xa6, 0xf0,
	0x37, 0x3d, 0x61, 0xa1, 0x11, 0xa0, 0x73, 0x5a, 0x16, 0x8c, 0xea, 0xb4, 0x8e, 0x61, 0x3f, 0x61,
	0x78, 0xce, 0x1e, 0x6b, 0x92, 0x0a, 0xfd, 0x9b, 0x60, 0xd7, 0xe0, 0x19, 0x78, 0x69, 0x21, 0xf4,
	0xa5, 0x34, 0xc4, 0x9e, 0xd9, 0x3f, 0xbc, 0xd8, 0x7f, 0x7f, 0xbc, 0x22, 0xea, 0x81, 0x23, 0x08,
	0xcb, 0x29, 0x06, 0x33, 0x38, 0x80, 0x6e, 0x42, 0xa4, 0x8a, 0xe5, 0x8e, 0xa4, 0xfc, 0x59, 0x62,
	0x5f, 0x77, 0x5d, 0x84, 0x21, 0x90, 0x15, 0x57, 0x71, 0xc1, 0x18, 0x15, 0xb1, 0xd6, 0x4b, 0x8a,
	0xbb, 0xc6, 0x3f, 0x11, 0x5e, 0xab, 0x0f, 0xd2, 0x3b, 0x25, 0x19, 0x92, 0x91, 0xb2, 0xe4, 0x59,
	0x86, 0xfb, 0x4d, 0x77, 0xfa, 0x0f, 0xbc, 0xcf, 0x53, 0x7b, 0xe0, 0x6c, 0x37, 0xcb, 0x75, 0x14,
	0xb4, 0x90, 0x0b, 0xf6, 0xdd, 0x76, 0x13, 0x05, 0x16, 0xfa, 0x0e, 0xfe, 0xf5, 0xf2, 0xf6, 0x66,
	0x11, 0x2d, 0x37, 0xeb, 0xab, 0x55, 0xd0, 0x7e, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x62, 0xd5,
	0xe2, 0x18, 0x02, 0x00, 0x00,
}
