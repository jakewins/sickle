// Code generated by protoc-gen-go.
// source: joint.proto
// DO NOT EDIT!

package gazebo_msgs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Joint_Type int32

const (
	Joint_REVOLUTE  Joint_Type = 1
	Joint_REVOLUTE2 Joint_Type = 2
	Joint_PRISMATIC Joint_Type = 3
	Joint_UNIVERSAL Joint_Type = 4
	Joint_BALL      Joint_Type = 5
	Joint_SCREW     Joint_Type = 6
	Joint_GEARBOX   Joint_Type = 7
	Joint_FIXED     Joint_Type = 8
)

var Joint_Type_name = map[int32]string{
	1: "REVOLUTE",
	2: "REVOLUTE2",
	3: "PRISMATIC",
	4: "UNIVERSAL",
	5: "BALL",
	6: "SCREW",
	7: "GEARBOX",
	8: "FIXED",
}
var Joint_Type_value = map[string]int32{
	"REVOLUTE":  1,
	"REVOLUTE2": 2,
	"PRISMATIC": 3,
	"UNIVERSAL": 4,
	"BALL":      5,
	"SCREW":     6,
	"GEARBOX":   7,
	"FIXED":     8,
}

func (x Joint_Type) Enum() *Joint_Type {
	p := new(Joint_Type)
	*p = x
	return p
}
func (x Joint_Type) String() string {
	return proto.EnumName(Joint_Type_name, int32(x))
}
func (x *Joint_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Joint_Type_value, data, "Joint_Type")
	if err != nil {
		return err
	}
	*x = Joint_Type(value)
	return nil
}
func (Joint_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor44, []int{0, 0} }

type Joint struct {
	Name             *string        `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Id               *uint32        `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Angle            []float64      `protobuf:"fixed64,3,rep,name=angle" json:"angle,omitempty"`
	Type             *Joint_Type    `protobuf:"varint,4,opt,name=type,enum=gazebo.msgs.Joint_Type" json:"type,omitempty"`
	Parent           *string        `protobuf:"bytes,5,opt,name=parent" json:"parent,omitempty"`
	ParentId         *uint32        `protobuf:"varint,6,opt,name=parent_id" json:"parent_id,omitempty"`
	Child            *string        `protobuf:"bytes,7,opt,name=child" json:"child,omitempty"`
	ChildId          *uint32        `protobuf:"varint,8,opt,name=child_id" json:"child_id,omitempty"`
	Pose             *Pose          `protobuf:"bytes,9,opt,name=pose" json:"pose,omitempty"`
	Axis1            *Axis          `protobuf:"bytes,10,opt,name=axis1" json:"axis1,omitempty"`
	Axis2            *Axis          `protobuf:"bytes,11,opt,name=axis2" json:"axis2,omitempty"`
	Cfm              *float64       `protobuf:"fixed64,12,opt,name=cfm" json:"cfm,omitempty"`
	Bounce           *float64       `protobuf:"fixed64,13,opt,name=bounce" json:"bounce,omitempty"`
	Velocity         *float64       `protobuf:"fixed64,14,opt,name=velocity" json:"velocity,omitempty"`
	FudgeFactor      *float64       `protobuf:"fixed64,15,opt,name=fudge_factor" json:"fudge_factor,omitempty"`
	LimitCfm         *float64       `protobuf:"fixed64,16,opt,name=limit_cfm" json:"limit_cfm,omitempty"`
	LimitErp         *float64       `protobuf:"fixed64,17,opt,name=limit_erp" json:"limit_erp,omitempty"`
	SuspensionCfm    *float64       `protobuf:"fixed64,18,opt,name=suspension_cfm" json:"suspension_cfm,omitempty"`
	SuspensionErp    *float64       `protobuf:"fixed64,19,opt,name=suspension_erp" json:"suspension_erp,omitempty"`
	Gearbox          *Joint_Gearbox `protobuf:"bytes,20,opt,name=gearbox" json:"gearbox,omitempty"`
	Screw            *Joint_Screw   `protobuf:"bytes,21,opt,name=screw" json:"screw,omitempty"`
	Sensor           []*Sensor      `protobuf:"bytes,22,rep,name=sensor" json:"sensor,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Joint) Reset()                    { *m = Joint{} }
func (m *Joint) String() string            { return proto.CompactTextString(m) }
func (*Joint) ProtoMessage()               {}
func (*Joint) Descriptor() ([]byte, []int) { return fileDescriptor44, []int{0} }

func (m *Joint) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Joint) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Joint) GetAngle() []float64 {
	if m != nil {
		return m.Angle
	}
	return nil
}

func (m *Joint) GetType() Joint_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Joint_REVOLUTE
}

func (m *Joint) GetParent() string {
	if m != nil && m.Parent != nil {
		return *m.Parent
	}
	return ""
}

func (m *Joint) GetParentId() uint32 {
	if m != nil && m.ParentId != nil {
		return *m.ParentId
	}
	return 0
}

func (m *Joint) GetChild() string {
	if m != nil && m.Child != nil {
		return *m.Child
	}
	return ""
}

func (m *Joint) GetChildId() uint32 {
	if m != nil && m.ChildId != nil {
		return *m.ChildId
	}
	return 0
}

func (m *Joint) GetPose() *Pose {
	if m != nil {
		return m.Pose
	}
	return nil
}

func (m *Joint) GetAxis1() *Axis {
	if m != nil {
		return m.Axis1
	}
	return nil
}

func (m *Joint) GetAxis2() *Axis {
	if m != nil {
		return m.Axis2
	}
	return nil
}

func (m *Joint) GetCfm() float64 {
	if m != nil && m.Cfm != nil {
		return *m.Cfm
	}
	return 0
}

func (m *Joint) GetBounce() float64 {
	if m != nil && m.Bounce != nil {
		return *m.Bounce
	}
	return 0
}

func (m *Joint) GetVelocity() float64 {
	if m != nil && m.Velocity != nil {
		return *m.Velocity
	}
	return 0
}

func (m *Joint) GetFudgeFactor() float64 {
	if m != nil && m.FudgeFactor != nil {
		return *m.FudgeFactor
	}
	return 0
}

func (m *Joint) GetLimitCfm() float64 {
	if m != nil && m.LimitCfm != nil {
		return *m.LimitCfm
	}
	return 0
}

func (m *Joint) GetLimitErp() float64 {
	if m != nil && m.LimitErp != nil {
		return *m.LimitErp
	}
	return 0
}

func (m *Joint) GetSuspensionCfm() float64 {
	if m != nil && m.SuspensionCfm != nil {
		return *m.SuspensionCfm
	}
	return 0
}

func (m *Joint) GetSuspensionErp() float64 {
	if m != nil && m.SuspensionErp != nil {
		return *m.SuspensionErp
	}
	return 0
}

func (m *Joint) GetGearbox() *Joint_Gearbox {
	if m != nil {
		return m.Gearbox
	}
	return nil
}

func (m *Joint) GetScrew() *Joint_Screw {
	if m != nil {
		return m.Screw
	}
	return nil
}

func (m *Joint) GetSensor() []*Sensor {
	if m != nil {
		return m.Sensor
	}
	return nil
}

type Joint_Gearbox struct {
	// / \brief Gearbox joint reference body link
	GearboxReferenceBody *string `protobuf:"bytes,1,req,name=gearbox_reference_body" json:"gearbox_reference_body,omitempty"`
	// / \brief Gearbox ratio.
	GearboxRatio     *float64 `protobuf:"fixed64,2,req,name=gearbox_ratio" json:"gearbox_ratio,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Joint_Gearbox) Reset()                    { *m = Joint_Gearbox{} }
func (m *Joint_Gearbox) String() string            { return proto.CompactTextString(m) }
func (*Joint_Gearbox) ProtoMessage()               {}
func (*Joint_Gearbox) Descriptor() ([]byte, []int) { return fileDescriptor44, []int{0, 0} }

func (m *Joint_Gearbox) GetGearboxReferenceBody() string {
	if m != nil && m.GearboxReferenceBody != nil {
		return *m.GearboxReferenceBody
	}
	return ""
}

func (m *Joint_Gearbox) GetGearboxRatio() float64 {
	if m != nil && m.GearboxRatio != nil {
		return *m.GearboxRatio
	}
	return 0
}

type Joint_Screw struct {
	// / \brief Screw joint thread pitch.
	ThreadPitch      *float64 `protobuf:"fixed64,1,req,name=thread_pitch" json:"thread_pitch,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Joint_Screw) Reset()                    { *m = Joint_Screw{} }
func (m *Joint_Screw) String() string            { return proto.CompactTextString(m) }
func (*Joint_Screw) ProtoMessage()               {}
func (*Joint_Screw) Descriptor() ([]byte, []int) { return fileDescriptor44, []int{0, 1} }

func (m *Joint_Screw) GetThreadPitch() float64 {
	if m != nil && m.ThreadPitch != nil {
		return *m.ThreadPitch
	}
	return 0
}

func init() {
	proto.RegisterType((*Joint)(nil), "gazebo.msgs.Joint")
	proto.RegisterType((*Joint_Gearbox)(nil), "gazebo.msgs.Joint.Gearbox")
	proto.RegisterType((*Joint_Screw)(nil), "gazebo.msgs.Joint.Screw")
	proto.RegisterEnum("gazebo.msgs.Joint_Type", Joint_Type_name, Joint_Type_value)
}

func init() { proto.RegisterFile("joint.proto", fileDescriptor44) }

var fileDescriptor44 = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x92, 0xf1, 0x8e, 0xd2, 0x40,
	0x10, 0xc6, 0x53, 0x68, 0x81, 0x4e, 0x01, 0x97, 0xbd, 0x3b, 0xdc, 0x90, 0xa8, 0xe4, 0x8c, 0x91,
	0xc4, 0x84, 0x44, 0x9e, 0x40, 0xee, 0xac, 0x17, 0x0c, 0x7a, 0x17, 0xe0, 0xce, 0xfb, 0xaf, 0x29,
	0x65, 0x29, 0x6b, 0xa0, 0xdb, 0xb4, 0x8b, 0x1e, 0xbe, 0xb0, 0xaf, 0xe1, 0xec, 0x16, 0x8c, 0x24,
	0xf8, 0x1f, 0xdf, 0xf7, 0xfd, 0x98, 0x99, 0xee, 0x0c, 0x78, 0xdf, 0xa5, 0x48, 0x54, 0x3f, 0xcd,
	0xa4, 0x92, 0xd4, 0x8b, 0xc3, 0x5f, 0x7c, 0x2e, 0xfb, 0x9b, 0x3c, 0xce, 0x3b, 0x10, 0x3e, 0x89,
	0xbc, 0x08, 0x3a, 0x90, 0xca, 0x9c, 0xef, 0x7f, 0xd7, 0x73, 0x9e, 0xe4, 0x32, 0x2b, 0xd4, 0xe5,
	0x6f, 0x07, 0x9c, 0xcf, 0xba, 0x04, 0xad, 0x83, 0x9d, 0x84, 0x1b, 0xce, 0xac, 0x6e, 0xa9, 0xe7,
	0x52, 0x80, 0x92, 0x58, 0xb0, 0x52, 0xd7, 0xea, 0x35, 0x68, 0x03, 0x9c, 0x30, 0x89, 0xd7, 0x9c,
	0x95, 0xbb, 0xe5, 0x9e, 0x45, 0xdf, 0x80, 0xad, 0x76, 0x29, 0x67, 0x36, 0x86, 0xcd, 0xc1, 0xf3,
	0xfe, 0x3f, 0x4d, 0xfb, 0xa6, 0x54, 0x7f, 0x86, 0x31, 0x6d, 0x42, 0x25, 0x0d, 0x33, 0x9e, 0x28,
	0xe6, 0x20, 0xe8, 0xd2, 0x16, 0xb8, 0x85, 0x0e, 0xb0, 0x70, 0xe5, 0x50, 0x38, 0x5a, 0x89, 0xf5,
	0x82, 0x55, 0x0d, 0x41, 0xa0, 0x66, 0xa4, 0x06, 0x6a, 0x06, 0x78, 0x05, 0xb6, 0x9e, 0x9c, 0xb9,
	0xa8, 0xbc, 0x41, 0xeb, 0xa8, 0xd5, 0x1d, 0x06, 0xb4, 0x8b, 0xa3, 0xe1, 0x67, 0xbe, 0x67, 0x70,
	0x82, 0x18, 0x62, 0x72, 0x20, 0x06, 0xcc, 0xfb, 0x1f, 0xe1, 0x41, 0x39, 0x5a, 0x6e, 0x58, 0x1d,
	0x73, 0x4b, 0x4f, 0x3d, 0x97, 0xdb, 0x24, 0xe2, 0xac, 0x61, 0x34, 0xce, 0xf4, 0x83, 0xaf, 0x65,
	0x24, 0xd4, 0x8e, 0x35, 0x8d, 0x73, 0x0e, 0xf5, 0xe5, 0x76, 0x11, 0xf3, 0x60, 0x19, 0x46, 0x4a,
	0x66, 0xec, 0x99, 0x71, 0xf1, 0xeb, 0xd6, 0x62, 0x23, 0x54, 0xa0, 0x4b, 0x91, 0x63, 0x8b, 0x67,
	0x29, 0x6b, 0x19, 0xab, 0x0d, 0xcd, 0x7c, 0x9b, 0xa7, 0xb8, 0x00, 0x21, 0x13, 0x83, 0xd2, 0x13,
	0xbe, 0xe6, 0xcf, 0x8c, 0xff, 0x0e, 0xaa, 0x31, 0x0f, 0xb3, 0xb9, 0x7c, 0x62, 0xe7, 0x66, 0xfc,
	0xce, 0x89, 0xd7, 0xbe, 0x29, 0x08, 0xfa, 0x16, 0x9c, 0x3c, 0xca, 0xf8, 0x4f, 0x76, 0x61, 0x50,
	0x76, 0x02, 0x9d, 0xea, 0x9c, 0xbe, 0x86, 0x4a, 0x71, 0x03, 0xac, 0x8d, 0x0b, 0xf5, 0x06, 0x67,
	0x47, 0xe4, 0xd4, 0x44, 0x9d, 0x0f, 0x50, 0x3d, 0x14, 0x7e, 0x09, 0xed, 0xfd, 0x14, 0x41, 0xc6,
	0x97, 0x1c, 0x77, 0x18, 0xf1, 0x60, 0x2e, 0x17, 0xbb, 0xfd, 0xad, 0x5c, 0x40, 0xe3, 0x6f, 0x1e,
	0x2a, 0x21, 0xf1, 0x6c, 0x4a, 0x3d, 0xab, 0xf3, 0x02, 0x9c, 0xa2, 0x1f, 0xbe, 0x98, 0x5a, 0x65,
	0x3c, 0x5c, 0x04, 0xa9, 0x50, 0xd1, 0xca, 0xfc, 0xcb, 0xba, 0x4c, 0xc0, 0x36, 0x77, 0x52, 0x87,
	0xda, 0xc4, 0x7f, 0xb8, 0x1d, 0xdf, 0xcf, 0x7c, 0x62, 0xe1, 0x49, 0xb8, 0x07, 0x35, 0x20, 0x25,
	0x2d, 0xef, 0x26, 0xa3, 0xe9, 0x97, 0xe1, 0x6c, 0x74, 0x4d, 0xca, 0x5a, 0xde, 0x7f, 0x1d, 0x3d,
	0xf8, 0x93, 0xe9, 0x70, 0x4c, 0x6c, 0x5a, 0x03, 0xfb, 0x6a, 0x38, 0x1e, 0x13, 0x87, 0xba, 0xd8,
	0xeb, 0x7a, 0xe2, 0x7f, 0x23, 0x15, 0x5c, 0x67, 0xf5, 0xc6, 0x1f, 0x4e, 0xae, 0x6e, 0x1f, 0x49,
	0x55, 0xfb, 0x9f, 0x46, 0x8f, 0xfe, 0x47, 0x52, 0xfb, 0x13, 0x00, 0x00, 0xff, 0xff, 0x59, 0xa1,
	0xd8, 0x9c, 0x2a, 0x03, 0x00, 0x00,
}
