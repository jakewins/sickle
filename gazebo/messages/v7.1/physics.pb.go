// Code generated by protoc-gen-go.
// source: physics.proto
// DO NOT EDIT!

package gazebo_msgs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Physics_Type int32

const (
	Physics_ODE     Physics_Type = 1
	Physics_BULLET  Physics_Type = 2
	Physics_SIMBODY Physics_Type = 3
	Physics_DART    Physics_Type = 4
)

var Physics_Type_name = map[int32]string{
	1: "ODE",
	2: "BULLET",
	3: "SIMBODY",
	4: "DART",
}
var Physics_Type_value = map[string]int32{
	"ODE":     1,
	"BULLET":  2,
	"SIMBODY": 3,
	"DART":    4,
}

func (x Physics_Type) Enum() *Physics_Type {
	p := new(Physics_Type)
	*p = x
	return p
}
func (x Physics_Type) String() string {
	return proto.EnumName(Physics_Type_name, int32(x))
}
func (x *Physics_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Physics_Type_value, data, "Physics_Type")
	if err != nil {
		return err
	}
	*x = Physics_Type(value)
	return nil
}
func (Physics_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor68, []int{0, 0} }

type Physics struct {
	Type                    *Physics_Type `protobuf:"varint,1,opt,name=type,enum=gazebo.msgs.Physics_Type,def=1" json:"type,omitempty"`
	SolverType              *string       `protobuf:"bytes,2,opt,name=solver_type" json:"solver_type,omitempty"`
	MinStepSize             *float64      `protobuf:"fixed64,3,opt,name=min_step_size" json:"min_step_size,omitempty"`
	PreconIters             *int32        `protobuf:"varint,4,opt,name=precon_iters" json:"precon_iters,omitempty"`
	Iters                   *int32        `protobuf:"varint,5,opt,name=iters" json:"iters,omitempty"`
	Sor                     *float64      `protobuf:"fixed64,6,opt,name=sor" json:"sor,omitempty"`
	Cfm                     *float64      `protobuf:"fixed64,7,opt,name=cfm" json:"cfm,omitempty"`
	Erp                     *float64      `protobuf:"fixed64,8,opt,name=erp" json:"erp,omitempty"`
	ContactMaxCorrectingVel *float64      `protobuf:"fixed64,9,opt,name=contact_max_correcting_vel" json:"contact_max_correcting_vel,omitempty"`
	ContactSurfaceLayer     *float64      `protobuf:"fixed64,10,opt,name=contact_surface_layer" json:"contact_surface_layer,omitempty"`
	Gravity                 *Vector3D     `protobuf:"bytes,11,opt,name=gravity" json:"gravity,omitempty"`
	EnablePhysics           *bool         `protobuf:"varint,12,opt,name=enable_physics" json:"enable_physics,omitempty"`
	RealTimeFactor          *float64      `protobuf:"fixed64,13,opt,name=real_time_factor" json:"real_time_factor,omitempty"`
	RealTimeUpdateRate      *float64      `protobuf:"fixed64,14,opt,name=real_time_update_rate" json:"real_time_update_rate,omitempty"`
	MaxStepSize             *float64      `protobuf:"fixed64,15,opt,name=max_step_size" json:"max_step_size,omitempty"`
	// The name of this physics profile (not to be confused with type)
	ProfileName *string `protobuf:"bytes,16,opt,name=profile_name" json:"profile_name,omitempty"`
	// / \brief Magnetic field
	MagneticField    *Vector3D `protobuf:"bytes,17,opt,name=magnetic_field" json:"magnetic_field,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Physics) Reset()                    { *m = Physics{} }
func (m *Physics) String() string            { return proto.CompactTextString(m) }
func (*Physics) ProtoMessage()               {}
func (*Physics) Descriptor() ([]byte, []int) { return fileDescriptor68, []int{0} }

const Default_Physics_Type Physics_Type = Physics_ODE

func (m *Physics) GetType() Physics_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_Physics_Type
}

func (m *Physics) GetSolverType() string {
	if m != nil && m.SolverType != nil {
		return *m.SolverType
	}
	return ""
}

func (m *Physics) GetMinStepSize() float64 {
	if m != nil && m.MinStepSize != nil {
		return *m.MinStepSize
	}
	return 0
}

func (m *Physics) GetPreconIters() int32 {
	if m != nil && m.PreconIters != nil {
		return *m.PreconIters
	}
	return 0
}

func (m *Physics) GetIters() int32 {
	if m != nil && m.Iters != nil {
		return *m.Iters
	}
	return 0
}

func (m *Physics) GetSor() float64 {
	if m != nil && m.Sor != nil {
		return *m.Sor
	}
	return 0
}

func (m *Physics) GetCfm() float64 {
	if m != nil && m.Cfm != nil {
		return *m.Cfm
	}
	return 0
}

func (m *Physics) GetErp() float64 {
	if m != nil && m.Erp != nil {
		return *m.Erp
	}
	return 0
}

func (m *Physics) GetContactMaxCorrectingVel() float64 {
	if m != nil && m.ContactMaxCorrectingVel != nil {
		return *m.ContactMaxCorrectingVel
	}
	return 0
}

func (m *Physics) GetContactSurfaceLayer() float64 {
	if m != nil && m.ContactSurfaceLayer != nil {
		return *m.ContactSurfaceLayer
	}
	return 0
}

func (m *Physics) GetGravity() *Vector3D {
	if m != nil {
		return m.Gravity
	}
	return nil
}

func (m *Physics) GetEnablePhysics() bool {
	if m != nil && m.EnablePhysics != nil {
		return *m.EnablePhysics
	}
	return false
}

func (m *Physics) GetRealTimeFactor() float64 {
	if m != nil && m.RealTimeFactor != nil {
		return *m.RealTimeFactor
	}
	return 0
}

func (m *Physics) GetRealTimeUpdateRate() float64 {
	if m != nil && m.RealTimeUpdateRate != nil {
		return *m.RealTimeUpdateRate
	}
	return 0
}

func (m *Physics) GetMaxStepSize() float64 {
	if m != nil && m.MaxStepSize != nil {
		return *m.MaxStepSize
	}
	return 0
}

func (m *Physics) GetProfileName() string {
	if m != nil && m.ProfileName != nil {
		return *m.ProfileName
	}
	return ""
}

func (m *Physics) GetMagneticField() *Vector3D {
	if m != nil {
		return m.MagneticField
	}
	return nil
}

func init() {
	proto.RegisterType((*Physics)(nil), "gazebo.msgs.Physics")
	proto.RegisterEnum("gazebo.msgs.Physics_Type", Physics_Type_name, Physics_Type_value)
}

func init() { proto.RegisterFile("physics.proto", fileDescriptor68) }

var fileDescriptor68 = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x51, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x55, 0x36, 0xe9, 0xa6, 0x3b, 0xd9, 0x84, 0x60, 0x28, 0x32, 0x2b, 0x21, 0xa1, 0x1e, 0x10,
	0x07, 0xc8, 0xa1, 0xdc, 0xb8, 0x51, 0xb5, 0x07, 0xa4, 0xa2, 0x22, 0x28, 0x48, 0x9c, 0x2c, 0xd7,
	0x9d, 0x04, 0x4b, 0x49, 0x1c, 0xd9, 0x6e, 0x44, 0xfa, 0xeb, 0x5c, 0x70, 0xdd, 0x56, 0x85, 0x0b,
	0x17, 0x4b, 0x6f, 0xde, 0x7b, 0x33, 0xe3, 0x37, 0x90, 0x76, 0x3f, 0x07, 0x23, 0x85, 0x29, 0x3a,
	0xad, 0xac, 0x22, 0x49, 0xc5, 0x0f, 0xb8, 0x55, 0x45, 0x63, 0x2a, 0xf3, 0x90, 0xf5, 0x28, 0xac,
	0xd2, 0xef, 0x76, 0x27, 0x72, 0xfa, 0x3b, 0x84, 0xf8, 0xf3, 0x49, 0x4e, 0xde, 0x40, 0x64, 0x87,
	0x0e, 0x69, 0xf0, 0x32, 0x78, 0x9d, 0xcd, 0x9e, 0x17, 0x7f, 0xf9, 0x8a, 0xb3, 0xa6, 0xd8, 0x38,
	0xc1, 0xfb, 0x70, 0xbd, 0x58, 0x92, 0x27, 0x90, 0x18, 0x55, 0xf7, 0xa8, 0x99, 0x37, 0xdd, 0x38,
	0xd3, 0x1d, 0x99, 0x40, 0xda, 0xc8, 0x96, 0x19, 0x8b, 0x1d, 0x33, 0xf2, 0x80, 0x34, 0x74, 0xe5,
	0x80, 0x3c, 0x85, 0xfb, 0x4e, 0xa3, 0x50, 0x2d, 0x93, 0x16, 0xb5, 0xa1, 0x91, 0xab, 0x8e, 0x48,
	0x0a, 0xa3, 0x13, 0x1c, 0x79, 0x98, 0x40, 0x68, 0x94, 0xa6, 0xb7, 0xde, 0xe1, 0x80, 0x28, 0x1b,
	0x1a, 0x5f, 0x00, 0xea, 0x8e, 0x8e, 0x3d, 0x98, 0xc2, 0x83, 0x6b, 0x64, 0xb9, 0xb0, 0xac, 0xe1,
	0xbf, 0x98, 0x50, 0xda, 0x75, 0xb6, 0xb2, 0xad, 0x58, 0x8f, 0x35, 0xbd, 0xf3, 0x9a, 0x17, 0x30,
	0xb9, 0x68, 0xcc, 0x5e, 0x97, 0x5c, 0x20, 0xab, 0xf9, 0x80, 0x9a, 0x82, 0xa7, 0x5f, 0x41, 0x5c,
	0x69, 0xde, 0x4b, 0x3b, 0xd0, 0xc4, 0x15, 0x92, 0xd9, 0xe4, 0x9f, 0xbf, 0x7e, 0x3f, 0x47, 0x44,
	0x9e, 0x41, 0x86, 0x2d, 0xdf, 0xd6, 0xc8, 0xce, 0x89, 0xd2, 0x7b, 0x27, 0x1f, 0x13, 0x0a, 0xb9,
	0x46, 0x5e, 0x33, 0x2b, 0x1b, 0x64, 0xae, 0xbb, 0x53, 0xd3, 0xf4, 0x32, 0xf8, 0xca, 0xec, 0xbb,
	0x1d, 0xb7, 0xc8, 0xb4, 0x7b, 0x68, 0xe6, 0xe9, 0x63, 0x3c, 0x6e, 0xe7, 0x6b, 0x3c, 0x8f, 0xae,
	0xf1, 0xa8, 0x52, 0xba, 0x41, 0x2d, 0x6f, 0x90, 0xe6, 0x3e, 0xcb, 0xb7, 0x90, 0x35, 0xbc, 0x6a,
	0xd1, 0x4a, 0xc1, 0x4a, 0x89, 0xf5, 0x8e, 0x3e, 0xfe, 0xcf, 0xb2, 0xd3, 0x19, 0x44, 0xc7, 0xe3,
	0x90, 0x18, 0x8e, 0xe7, 0xc9, 0x03, 0x02, 0x70, 0x3b, 0xff, 0xb6, 0x5a, 0x2d, 0x37, 0xf9, 0x8d,
	0x4b, 0x30, 0xfe, 0xfa, 0xf1, 0xd3, 0x7c, 0xbd, 0xf8, 0x91, 0x87, 0x64, 0x0c, 0xd1, 0xe2, 0xc3,
	0x97, 0x4d, 0x1e, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x37, 0xa0, 0x4f, 0x35, 0x2a, 0x02, 0x00,
	0x00,
}
